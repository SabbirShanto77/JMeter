/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 238.0, "minX": 0.0, "maxY": 8260.0, "series": [{"data": [[0.0, 238.0], [0.1, 239.0], [0.2, 240.0], [0.3, 241.0], [0.4, 241.0], [0.5, 242.0], [0.6, 242.0], [0.7, 242.0], [0.8, 242.0], [0.9, 242.0], [1.0, 242.0], [1.1, 242.0], [1.2, 243.0], [1.3, 243.0], [1.4, 243.0], [1.5, 243.0], [1.6, 243.0], [1.7, 243.0], [1.8, 243.0], [1.9, 243.0], [2.0, 243.0], [2.1, 244.0], [2.2, 244.0], [2.3, 244.0], [2.4, 244.0], [2.5, 244.0], [2.6, 244.0], [2.7, 244.0], [2.8, 244.0], [2.9, 244.0], [3.0, 244.0], [3.1, 244.0], [3.2, 244.0], [3.3, 244.0], [3.4, 245.0], [3.5, 245.0], [3.6, 245.0], [3.7, 245.0], [3.8, 245.0], [3.9, 245.0], [4.0, 245.0], [4.1, 245.0], [4.2, 245.0], [4.3, 245.0], [4.4, 245.0], [4.5, 245.0], [4.6, 246.0], [4.7, 246.0], [4.8, 246.0], [4.9, 246.0], [5.0, 246.0], [5.1, 246.0], [5.2, 246.0], [5.3, 246.0], [5.4, 246.0], [5.5, 246.0], [5.6, 246.0], [5.7, 246.0], [5.8, 246.0], [5.9, 246.0], [6.0, 246.0], [6.1, 247.0], [6.2, 247.0], [6.3, 247.0], [6.4, 247.0], [6.5, 247.0], [6.6, 247.0], [6.7, 247.0], [6.8, 247.0], [6.9, 247.0], [7.0, 247.0], [7.1, 247.0], [7.2, 247.0], [7.3, 247.0], [7.4, 247.0], [7.5, 247.0], [7.6, 247.0], [7.7, 247.0], [7.8, 247.0], [7.9, 248.0], [8.0, 248.0], [8.1, 248.0], [8.2, 248.0], [8.3, 248.0], [8.4, 248.0], [8.5, 248.0], [8.6, 248.0], [8.7, 248.0], [8.8, 248.0], [8.9, 248.0], [9.0, 248.0], [9.1, 248.0], [9.2, 248.0], [9.3, 248.0], [9.4, 248.0], [9.5, 248.0], [9.6, 248.0], [9.7, 248.0], [9.8, 248.0], [9.9, 248.0], [10.0, 248.0], [10.1, 248.0], [10.2, 248.0], [10.3, 248.0], [10.4, 248.0], [10.5, 248.0], [10.6, 248.0], [10.7, 249.0], [10.8, 249.0], [10.9, 249.0], [11.0, 249.0], [11.1, 249.0], [11.2, 249.0], [11.3, 249.0], [11.4, 249.0], [11.5, 249.0], [11.6, 249.0], [11.7, 249.0], [11.8, 249.0], [11.9, 249.0], [12.0, 249.0], [12.1, 249.0], [12.2, 249.0], [12.3, 249.0], [12.4, 249.0], [12.5, 249.0], [12.6, 249.0], [12.7, 250.0], [12.8, 250.0], [12.9, 250.0], [13.0, 250.0], [13.1, 250.0], [13.2, 250.0], [13.3, 250.0], [13.4, 250.0], [13.5, 250.0], [13.6, 250.0], [13.7, 250.0], [13.8, 250.0], [13.9, 250.0], [14.0, 250.0], [14.1, 250.0], [14.2, 250.0], [14.3, 250.0], [14.4, 250.0], [14.5, 250.0], [14.6, 250.0], [14.7, 250.0], [14.8, 250.0], [14.9, 250.0], [15.0, 250.0], [15.1, 250.0], [15.2, 250.0], [15.3, 250.0], [15.4, 250.0], [15.5, 250.0], [15.6, 250.0], [15.7, 250.0], [15.8, 250.0], [15.9, 250.0], [16.0, 251.0], [16.1, 251.0], [16.2, 251.0], [16.3, 251.0], [16.4, 251.0], [16.5, 251.0], [16.6, 251.0], [16.7, 251.0], [16.8, 251.0], [16.9, 251.0], [17.0, 251.0], [17.1, 251.0], [17.2, 251.0], [17.3, 251.0], [17.4, 251.0], [17.5, 251.0], [17.6, 251.0], [17.7, 251.0], [17.8, 251.0], [17.9, 251.0], [18.0, 251.0], [18.1, 251.0], [18.2, 251.0], [18.3, 251.0], [18.4, 251.0], [18.5, 251.0], [18.6, 251.0], [18.7, 251.0], [18.8, 251.0], [18.9, 251.0], [19.0, 251.0], [19.1, 251.0], [19.2, 251.0], [19.3, 251.0], [19.4, 251.0], [19.5, 252.0], [19.6, 252.0], [19.7, 252.0], [19.8, 252.0], [19.9, 252.0], [20.0, 252.0], [20.1, 252.0], [20.2, 252.0], [20.3, 252.0], [20.4, 252.0], [20.5, 252.0], [20.6, 252.0], [20.7, 252.0], [20.8, 252.0], [20.9, 252.0], [21.0, 252.0], [21.1, 252.0], [21.2, 252.0], [21.3, 252.0], [21.4, 252.0], [21.5, 252.0], [21.6, 252.0], [21.7, 252.0], [21.8, 252.0], [21.9, 253.0], [22.0, 253.0], [22.1, 253.0], [22.2, 253.0], [22.3, 253.0], [22.4, 253.0], [22.5, 253.0], [22.6, 253.0], [22.7, 253.0], [22.8, 253.0], [22.9, 253.0], [23.0, 253.0], [23.1, 253.0], [23.2, 253.0], [23.3, 253.0], [23.4, 253.0], [23.5, 253.0], [23.6, 253.0], [23.7, 253.0], [23.8, 253.0], [23.9, 253.0], [24.0, 253.0], [24.1, 253.0], [24.2, 253.0], [24.3, 254.0], [24.4, 254.0], [24.5, 254.0], [24.6, 254.0], [24.7, 254.0], [24.8, 254.0], [24.9, 254.0], [25.0, 254.0], [25.1, 254.0], [25.2, 254.0], [25.3, 254.0], [25.4, 254.0], [25.5, 254.0], [25.6, 254.0], [25.7, 254.0], [25.8, 254.0], [25.9, 254.0], [26.0, 254.0], [26.1, 254.0], [26.2, 254.0], [26.3, 254.0], [26.4, 254.0], [26.5, 254.0], [26.6, 254.0], [26.7, 254.0], [26.8, 254.0], [26.9, 254.0], [27.0, 254.0], [27.1, 254.0], [27.2, 254.0], [27.3, 254.0], [27.4, 254.0], [27.5, 254.0], [27.6, 254.0], [27.7, 254.0], [27.8, 254.0], [27.9, 254.0], [28.0, 255.0], [28.1, 255.0], [28.2, 255.0], [28.3, 255.0], [28.4, 255.0], [28.5, 255.0], [28.6, 255.0], [28.7, 255.0], [28.8, 255.0], [28.9, 255.0], [29.0, 255.0], [29.1, 255.0], [29.2, 255.0], [29.3, 255.0], [29.4, 255.0], [29.5, 255.0], [29.6, 255.0], [29.7, 255.0], [29.8, 255.0], [29.9, 255.0], [30.0, 255.0], [30.1, 255.0], [30.2, 255.0], [30.3, 255.0], [30.4, 255.0], [30.5, 255.0], [30.6, 255.0], [30.7, 255.0], [30.8, 255.0], [30.9, 255.0], [31.0, 255.0], [31.1, 255.0], [31.2, 255.0], [31.3, 255.0], [31.4, 255.0], [31.5, 255.0], [31.6, 256.0], [31.7, 256.0], [31.8, 256.0], [31.9, 256.0], [32.0, 256.0], [32.1, 256.0], [32.2, 256.0], [32.3, 256.0], [32.4, 256.0], [32.5, 256.0], [32.6, 256.0], [32.7, 256.0], [32.8, 256.0], [32.9, 256.0], [33.0, 256.0], [33.1, 256.0], [33.2, 256.0], [33.3, 256.0], [33.4, 256.0], [33.5, 256.0], [33.6, 256.0], [33.7, 256.0], [33.8, 257.0], [33.9, 257.0], [34.0, 257.0], [34.1, 257.0], [34.2, 257.0], [34.3, 257.0], [34.4, 257.0], [34.5, 257.0], [34.6, 257.0], [34.7, 257.0], [34.8, 258.0], [34.9, 258.0], [35.0, 258.0], [35.1, 258.0], [35.2, 258.0], [35.3, 258.0], [35.4, 258.0], [35.5, 258.0], [35.6, 258.0], [35.7, 258.0], [35.8, 258.0], [35.9, 258.0], [36.0, 258.0], [36.1, 258.0], [36.2, 258.0], [36.3, 258.0], [36.4, 258.0], [36.5, 258.0], [36.6, 258.0], [36.7, 258.0], [36.8, 259.0], [36.9, 259.0], [37.0, 259.0], [37.1, 259.0], [37.2, 259.0], [37.3, 259.0], [37.4, 259.0], [37.5, 259.0], [37.6, 259.0], [37.7, 259.0], [37.8, 259.0], [37.9, 259.0], [38.0, 259.0], [38.1, 259.0], [38.2, 259.0], [38.3, 259.0], [38.4, 259.0], [38.5, 259.0], [38.6, 260.0], [38.7, 260.0], [38.8, 260.0], [38.9, 260.0], [39.0, 260.0], [39.1, 260.0], [39.2, 260.0], [39.3, 260.0], [39.4, 260.0], [39.5, 260.0], [39.6, 260.0], [39.7, 260.0], [39.8, 261.0], [39.9, 261.0], [40.0, 261.0], [40.1, 261.0], [40.2, 261.0], [40.3, 261.0], [40.4, 261.0], [40.5, 261.0], [40.6, 261.0], [40.7, 261.0], [40.8, 261.0], [40.9, 261.0], [41.0, 261.0], [41.1, 261.0], [41.2, 261.0], [41.3, 261.0], [41.4, 261.0], [41.5, 262.0], [41.6, 262.0], [41.7, 262.0], [41.8, 262.0], [41.9, 262.0], [42.0, 262.0], [42.1, 262.0], [42.2, 262.0], [42.3, 262.0], [42.4, 262.0], [42.5, 262.0], [42.6, 262.0], [42.7, 262.0], [42.8, 262.0], [42.9, 262.0], [43.0, 263.0], [43.1, 263.0], [43.2, 263.0], [43.3, 263.0], [43.4, 263.0], [43.5, 263.0], [43.6, 263.0], [43.7, 263.0], [43.8, 263.0], [43.9, 263.0], [44.0, 263.0], [44.1, 263.0], [44.2, 263.0], [44.3, 263.0], [44.4, 263.0], [44.5, 263.0], [44.6, 263.0], [44.7, 263.0], [44.8, 264.0], [44.9, 264.0], [45.0, 264.0], [45.1, 264.0], [45.2, 264.0], [45.3, 264.0], [45.4, 264.0], [45.5, 264.0], [45.6, 264.0], [45.7, 264.0], [45.8, 264.0], [45.9, 264.0], [46.0, 264.0], [46.1, 264.0], [46.2, 264.0], [46.3, 264.0], [46.4, 264.0], [46.5, 264.0], [46.6, 264.0], [46.7, 264.0], [46.8, 264.0], [46.9, 264.0], [47.0, 264.0], [47.1, 264.0], [47.2, 265.0], [47.3, 265.0], [47.4, 265.0], [47.5, 265.0], [47.6, 265.0], [47.7, 265.0], [47.8, 265.0], [47.9, 265.0], [48.0, 265.0], [48.1, 265.0], [48.2, 265.0], [48.3, 265.0], [48.4, 265.0], [48.5, 265.0], [48.6, 265.0], [48.7, 265.0], [48.8, 266.0], [48.9, 266.0], [49.0, 266.0], [49.1, 266.0], [49.2, 266.0], [49.3, 266.0], [49.4, 266.0], [49.5, 266.0], [49.6, 266.0], [49.7, 266.0], [49.8, 266.0], [49.9, 266.0], [50.0, 266.0], [50.1, 266.0], [50.2, 266.0], [50.3, 266.0], [50.4, 266.0], [50.5, 266.0], [50.6, 266.0], [50.7, 266.0], [50.8, 266.0], [50.9, 266.0], [51.0, 266.0], [51.1, 266.0], [51.2, 266.0], [51.3, 267.0], [51.4, 267.0], [51.5, 267.0], [51.6, 267.0], [51.7, 267.0], [51.8, 267.0], [51.9, 267.0], [52.0, 267.0], [52.1, 267.0], [52.2, 267.0], [52.3, 267.0], [52.4, 267.0], [52.5, 267.0], [52.6, 267.0], [52.7, 267.0], [52.8, 267.0], [52.9, 267.0], [53.0, 267.0], [53.1, 267.0], [53.2, 267.0], [53.3, 267.0], [53.4, 267.0], [53.5, 267.0], [53.6, 267.0], [53.7, 268.0], [53.8, 268.0], [53.9, 268.0], [54.0, 268.0], [54.1, 268.0], [54.2, 268.0], [54.3, 268.0], [54.4, 268.0], [54.5, 268.0], [54.6, 268.0], [54.7, 268.0], [54.8, 268.0], [54.9, 268.0], [55.0, 268.0], [55.1, 268.0], [55.2, 268.0], [55.3, 268.0], [55.4, 268.0], [55.5, 268.0], [55.6, 268.0], [55.7, 269.0], [55.8, 269.0], [55.9, 269.0], [56.0, 269.0], [56.1, 269.0], [56.2, 269.0], [56.3, 269.0], [56.4, 269.0], [56.5, 269.0], [56.6, 269.0], [56.7, 269.0], [56.8, 269.0], [56.9, 269.0], [57.0, 269.0], [57.1, 269.0], [57.2, 269.0], [57.3, 269.0], [57.4, 269.0], [57.5, 269.0], [57.6, 269.0], [57.7, 269.0], [57.8, 269.0], [57.9, 269.0], [58.0, 269.0], [58.1, 270.0], [58.2, 270.0], [58.3, 270.0], [58.4, 270.0], [58.5, 270.0], [58.6, 270.0], [58.7, 270.0], [58.8, 270.0], [58.9, 270.0], [59.0, 270.0], [59.1, 270.0], [59.2, 270.0], [59.3, 270.0], [59.4, 270.0], [59.5, 270.0], [59.6, 270.0], [59.7, 270.0], [59.8, 270.0], [59.9, 270.0], [60.0, 270.0], [60.1, 270.0], [60.2, 270.0], [60.3, 270.0], [60.4, 271.0], [60.5, 271.0], [60.6, 271.0], [60.7, 271.0], [60.8, 271.0], [60.9, 271.0], [61.0, 271.0], [61.1, 271.0], [61.2, 271.0], [61.3, 271.0], [61.4, 271.0], [61.5, 271.0], [61.6, 271.0], [61.7, 271.0], [61.8, 271.0], [61.9, 271.0], [62.0, 271.0], [62.1, 271.0], [62.2, 271.0], [62.3, 271.0], [62.4, 271.0], [62.5, 271.0], [62.6, 271.0], [62.7, 271.0], [62.8, 272.0], [62.9, 272.0], [63.0, 272.0], [63.1, 272.0], [63.2, 272.0], [63.3, 272.0], [63.4, 272.0], [63.5, 272.0], [63.6, 272.0], [63.7, 272.0], [63.8, 272.0], [63.9, 272.0], [64.0, 272.0], [64.1, 272.0], [64.2, 272.0], [64.3, 272.0], [64.4, 272.0], [64.5, 272.0], [64.6, 272.0], [64.7, 273.0], [64.8, 273.0], [64.9, 273.0], [65.0, 273.0], [65.1, 273.0], [65.2, 273.0], [65.3, 273.0], [65.4, 273.0], [65.5, 273.0], [65.6, 273.0], [65.7, 273.0], [65.8, 273.0], [65.9, 273.0], [66.0, 273.0], [66.1, 273.0], [66.2, 273.0], [66.3, 273.0], [66.4, 273.0], [66.5, 273.0], [66.6, 274.0], [66.7, 274.0], [66.8, 274.0], [66.9, 274.0], [67.0, 274.0], [67.1, 274.0], [67.2, 274.0], [67.3, 274.0], [67.4, 274.0], [67.5, 274.0], [67.6, 274.0], [67.7, 274.0], [67.8, 274.0], [67.9, 274.0], [68.0, 274.0], [68.1, 274.0], [68.2, 274.0], [68.3, 274.0], [68.4, 274.0], [68.5, 274.0], [68.6, 274.0], [68.7, 275.0], [68.8, 275.0], [68.9, 275.0], [69.0, 275.0], [69.1, 275.0], [69.2, 275.0], [69.3, 275.0], [69.4, 275.0], [69.5, 275.0], [69.6, 275.0], [69.7, 275.0], [69.8, 275.0], [69.9, 275.0], [70.0, 275.0], [70.1, 275.0], [70.2, 276.0], [70.3, 276.0], [70.4, 276.0], [70.5, 276.0], [70.6, 276.0], [70.7, 276.0], [70.8, 276.0], [70.9, 276.0], [71.0, 276.0], [71.1, 276.0], [71.2, 276.0], [71.3, 277.0], [71.4, 277.0], [71.5, 277.0], [71.6, 277.0], [71.7, 277.0], [71.8, 277.0], [71.9, 277.0], [72.0, 277.0], [72.1, 277.0], [72.2, 277.0], [72.3, 277.0], [72.4, 278.0], [72.5, 278.0], [72.6, 278.0], [72.7, 278.0], [72.8, 278.0], [72.9, 279.0], [73.0, 279.0], [73.1, 279.0], [73.2, 279.0], [73.3, 279.0], [73.4, 279.0], [73.5, 279.0], [73.6, 279.0], [73.7, 279.0], [73.8, 279.0], [73.9, 280.0], [74.0, 280.0], [74.1, 280.0], [74.2, 281.0], [74.3, 281.0], [74.4, 282.0], [74.5, 282.0], [74.6, 282.0], [74.7, 283.0], [74.8, 283.0], [74.9, 283.0], [75.0, 283.0], [75.1, 283.0], [75.2, 283.0], [75.3, 284.0], [75.4, 284.0], [75.5, 284.0], [75.6, 285.0], [75.7, 285.0], [75.8, 286.0], [75.9, 286.0], [76.0, 288.0], [76.1, 288.0], [76.2, 288.0], [76.3, 289.0], [76.4, 289.0], [76.5, 290.0], [76.6, 291.0], [76.7, 292.0], [76.8, 292.0], [76.9, 292.0], [77.0, 292.0], [77.1, 293.0], [77.2, 294.0], [77.3, 294.0], [77.4, 294.0], [77.5, 295.0], [77.6, 295.0], [77.7, 296.0], [77.8, 296.0], [77.9, 296.0], [78.0, 297.0], [78.1, 298.0], [78.2, 298.0], [78.3, 299.0], [78.4, 299.0], [78.5, 299.0], [78.6, 300.0], [78.7, 302.0], [78.8, 303.0], [78.9, 303.0], [79.0, 303.0], [79.1, 304.0], [79.2, 304.0], [79.3, 305.0], [79.4, 305.0], [79.5, 308.0], [79.6, 308.0], [79.7, 308.0], [79.8, 308.0], [79.9, 309.0], [80.0, 309.0], [80.1, 310.0], [80.2, 311.0], [80.3, 311.0], [80.4, 312.0], [80.5, 313.0], [80.6, 315.0], [80.7, 317.0], [80.8, 317.0], [80.9, 318.0], [81.0, 318.0], [81.1, 319.0], [81.2, 319.0], [81.3, 320.0], [81.4, 321.0], [81.5, 322.0], [81.6, 322.0], [81.7, 322.0], [81.8, 322.0], [81.9, 323.0], [82.0, 324.0], [82.1, 324.0], [82.2, 326.0], [82.3, 329.0], [82.4, 330.0], [82.5, 331.0], [82.6, 331.0], [82.7, 331.0], [82.8, 333.0], [82.9, 333.0], [83.0, 334.0], [83.1, 335.0], [83.2, 336.0], [83.3, 337.0], [83.4, 340.0], [83.5, 342.0], [83.6, 342.0], [83.7, 344.0], [83.8, 345.0], [83.9, 345.0], [84.0, 346.0], [84.1, 348.0], [84.2, 348.0], [84.3, 350.0], [84.4, 350.0], [84.5, 350.0], [84.6, 353.0], [84.7, 354.0], [84.8, 358.0], [84.9, 362.0], [85.0, 364.0], [85.1, 366.0], [85.2, 367.0], [85.3, 371.0], [85.4, 371.0], [85.5, 372.0], [85.6, 372.0], [85.7, 373.0], [85.8, 375.0], [85.9, 380.0], [86.0, 380.0], [86.1, 380.0], [86.2, 381.0], [86.3, 382.0], [86.4, 383.0], [86.5, 384.0], [86.6, 386.0], [86.7, 387.0], [86.8, 388.0], [86.9, 389.0], [87.0, 390.0], [87.1, 391.0], [87.2, 391.0], [87.3, 392.0], [87.4, 393.0], [87.5, 395.0], [87.6, 398.0], [87.7, 400.0], [87.8, 407.0], [87.9, 408.0], [88.0, 411.0], [88.1, 411.0], [88.2, 411.0], [88.3, 413.0], [88.4, 413.0], [88.5, 414.0], [88.6, 419.0], [88.7, 419.0], [88.8, 419.0], [88.9, 420.0], [89.0, 420.0], [89.1, 421.0], [89.2, 421.0], [89.3, 424.0], [89.4, 424.0], [89.5, 429.0], [89.6, 431.0], [89.7, 435.0], [89.8, 437.0], [89.9, 437.0], [90.0, 443.0], [90.1, 444.0], [90.2, 446.0], [90.3, 446.0], [90.4, 450.0], [90.5, 450.0], [90.6, 451.0], [90.7, 453.0], [90.8, 453.0], [90.9, 458.0], [91.0, 462.0], [91.1, 462.0], [91.2, 463.0], [91.3, 464.0], [91.4, 465.0], [91.5, 465.0], [91.6, 466.0], [91.7, 468.0], [91.8, 475.0], [91.9, 477.0], [92.0, 478.0], [92.1, 488.0], [92.2, 491.0], [92.3, 494.0], [92.4, 496.0], [92.5, 498.0], [92.6, 498.0], [92.7, 501.0], [92.8, 515.0], [92.9, 516.0], [93.0, 517.0], [93.1, 518.0], [93.2, 520.0], [93.3, 522.0], [93.4, 526.0], [93.5, 527.0], [93.6, 530.0], [93.7, 531.0], [93.8, 534.0], [93.9, 539.0], [94.0, 546.0], [94.1, 547.0], [94.2, 548.0], [94.3, 554.0], [94.4, 555.0], [94.5, 558.0], [94.6, 562.0], [94.7, 563.0], [94.8, 566.0], [94.9, 568.0], [95.0, 569.0], [95.1, 571.0], [95.2, 573.0], [95.3, 577.0], [95.4, 582.0], [95.5, 606.0], [95.6, 607.0], [95.7, 612.0], [95.8, 619.0], [95.9, 620.0], [96.0, 628.0], [96.1, 641.0], [96.2, 643.0], [96.3, 648.0], [96.4, 650.0], [96.5, 650.0], [96.6, 652.0], [96.7, 658.0], [96.8, 658.0], [96.9, 667.0], [97.0, 677.0], [97.1, 683.0], [97.2, 684.0], [97.3, 708.0], [97.4, 709.0], [97.5, 715.0], [97.6, 720.0], [97.7, 725.0], [97.8, 740.0], [97.9, 748.0], [98.0, 748.0], [98.1, 765.0], [98.2, 777.0], [98.3, 782.0], [98.4, 835.0], [98.5, 894.0], [98.6, 900.0], [98.7, 933.0], [98.8, 946.0], [98.9, 967.0], [99.0, 1071.0], [99.1, 1172.0], [99.2, 1196.0], [99.3, 1224.0], [99.4, 1234.0], [99.5, 1257.0], [99.6, 1273.0], [99.7, 1300.0], [99.8, 1314.0], [99.9, 1490.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[0.0, 952.0], [0.1, 960.0], [0.2, 961.0], [0.3, 963.0], [0.4, 965.0], [0.5, 965.0], [0.6, 966.0], [0.7, 967.0], [0.8, 967.0], [0.9, 968.0], [1.0, 968.0], [1.1, 971.0], [1.2, 971.0], [1.3, 971.0], [1.4, 973.0], [1.5, 973.0], [1.6, 975.0], [1.7, 975.0], [1.8, 975.0], [1.9, 975.0], [2.0, 975.0], [2.1, 976.0], [2.2, 976.0], [2.3, 976.0], [2.4, 976.0], [2.5, 976.0], [2.6, 976.0], [2.7, 976.0], [2.8, 976.0], [2.9, 977.0], [3.0, 977.0], [3.1, 977.0], [3.2, 978.0], [3.3, 978.0], [3.4, 978.0], [3.5, 979.0], [3.6, 979.0], [3.7, 979.0], [3.8, 979.0], [3.9, 980.0], [4.0, 980.0], [4.1, 980.0], [4.2, 981.0], [4.3, 981.0], [4.4, 981.0], [4.5, 982.0], [4.6, 982.0], [4.7, 983.0], [4.8, 983.0], [4.9, 983.0], [5.0, 983.0], [5.1, 983.0], [5.2, 984.0], [5.3, 985.0], [5.4, 985.0], [5.5, 985.0], [5.6, 986.0], [5.7, 986.0], [5.8, 986.0], [5.9, 986.0], [6.0, 986.0], [6.1, 986.0], [6.2, 986.0], [6.3, 986.0], [6.4, 987.0], [6.5, 987.0], [6.6, 987.0], [6.7, 987.0], [6.8, 988.0], [6.9, 989.0], [7.0, 989.0], [7.1, 989.0], [7.2, 989.0], [7.3, 989.0], [7.4, 989.0], [7.5, 989.0], [7.6, 990.0], [7.7, 990.0], [7.8, 990.0], [7.9, 990.0], [8.0, 990.0], [8.1, 990.0], [8.2, 990.0], [8.3, 990.0], [8.4, 990.0], [8.5, 991.0], [8.6, 991.0], [8.7, 991.0], [8.8, 991.0], [8.9, 992.0], [9.0, 992.0], [9.1, 992.0], [9.2, 992.0], [9.3, 992.0], [9.4, 992.0], [9.5, 993.0], [9.6, 993.0], [9.7, 993.0], [9.8, 993.0], [9.9, 993.0], [10.0, 993.0], [10.1, 994.0], [10.2, 994.0], [10.3, 994.0], [10.4, 994.0], [10.5, 994.0], [10.6, 994.0], [10.7, 995.0], [10.8, 995.0], [10.9, 995.0], [11.0, 995.0], [11.1, 995.0], [11.2, 996.0], [11.3, 996.0], [11.4, 996.0], [11.5, 996.0], [11.6, 997.0], [11.7, 997.0], [11.8, 997.0], [11.9, 997.0], [12.0, 997.0], [12.1, 997.0], [12.2, 998.0], [12.3, 998.0], [12.4, 998.0], [12.5, 998.0], [12.6, 998.0], [12.7, 999.0], [12.8, 999.0], [12.9, 999.0], [13.0, 999.0], [13.1, 999.0], [13.2, 999.0], [13.3, 999.0], [13.4, 999.0], [13.5, 1000.0], [13.6, 1000.0], [13.7, 1000.0], [13.8, 1000.0], [13.9, 1000.0], [14.0, 1001.0], [14.1, 1001.0], [14.2, 1001.0], [14.3, 1001.0], [14.4, 1001.0], [14.5, 1001.0], [14.6, 1001.0], [14.7, 1001.0], [14.8, 1001.0], [14.9, 1002.0], [15.0, 1002.0], [15.1, 1002.0], [15.2, 1002.0], [15.3, 1002.0], [15.4, 1002.0], [15.5, 1002.0], [15.6, 1002.0], [15.7, 1002.0], [15.8, 1002.0], [15.9, 1002.0], [16.0, 1002.0], [16.1, 1002.0], [16.2, 1002.0], [16.3, 1002.0], [16.4, 1002.0], [16.5, 1003.0], [16.6, 1003.0], [16.7, 1003.0], [16.8, 1003.0], [16.9, 1003.0], [17.0, 1003.0], [17.1, 1003.0], [17.2, 1004.0], [17.3, 1004.0], [17.4, 1004.0], [17.5, 1004.0], [17.6, 1004.0], [17.7, 1004.0], [17.8, 1004.0], [17.9, 1004.0], [18.0, 1005.0], [18.1, 1005.0], [18.2, 1005.0], [18.3, 1005.0], [18.4, 1005.0], [18.5, 1005.0], [18.6, 1005.0], [18.7, 1006.0], [18.8, 1006.0], [18.9, 1006.0], [19.0, 1006.0], [19.1, 1006.0], [19.2, 1006.0], [19.3, 1006.0], [19.4, 1007.0], [19.5, 1007.0], [19.6, 1007.0], [19.7, 1007.0], [19.8, 1007.0], [19.9, 1008.0], [20.0, 1008.0], [20.1, 1008.0], [20.2, 1008.0], [20.3, 1009.0], [20.4, 1009.0], [20.5, 1009.0], [20.6, 1009.0], [20.7, 1009.0], [20.8, 1009.0], [20.9, 1009.0], [21.0, 1010.0], [21.1, 1010.0], [21.2, 1010.0], [21.3, 1010.0], [21.4, 1010.0], [21.5, 1011.0], [21.6, 1011.0], [21.7, 1011.0], [21.8, 1011.0], [21.9, 1011.0], [22.0, 1012.0], [22.1, 1012.0], [22.2, 1012.0], [22.3, 1012.0], [22.4, 1012.0], [22.5, 1012.0], [22.6, 1012.0], [22.7, 1012.0], [22.8, 1013.0], [22.9, 1013.0], [23.0, 1013.0], [23.1, 1013.0], [23.2, 1013.0], [23.3, 1014.0], [23.4, 1014.0], [23.5, 1014.0], [23.6, 1014.0], [23.7, 1014.0], [23.8, 1014.0], [23.9, 1014.0], [24.0, 1014.0], [24.1, 1015.0], [24.2, 1015.0], [24.3, 1015.0], [24.4, 1015.0], [24.5, 1015.0], [24.6, 1015.0], [24.7, 1016.0], [24.8, 1016.0], [24.9, 1016.0], [25.0, 1016.0], [25.1, 1016.0], [25.2, 1016.0], [25.3, 1016.0], [25.4, 1016.0], [25.5, 1016.0], [25.6, 1016.0], [25.7, 1017.0], [25.8, 1017.0], [25.9, 1017.0], [26.0, 1017.0], [26.1, 1017.0], [26.2, 1017.0], [26.3, 1017.0], [26.4, 1017.0], [26.5, 1017.0], [26.6, 1017.0], [26.7, 1017.0], [26.8, 1018.0], [26.9, 1018.0], [27.0, 1018.0], [27.1, 1018.0], [27.2, 1018.0], [27.3, 1018.0], [27.4, 1018.0], [27.5, 1019.0], [27.6, 1019.0], [27.7, 1019.0], [27.8, 1019.0], [27.9, 1019.0], [28.0, 1019.0], [28.1, 1019.0], [28.2, 1019.0], [28.3, 1020.0], [28.4, 1020.0], [28.5, 1020.0], [28.6, 1020.0], [28.7, 1020.0], [28.8, 1020.0], [28.9, 1020.0], [29.0, 1020.0], [29.1, 1020.0], [29.2, 1021.0], [29.3, 1021.0], [29.4, 1021.0], [29.5, 1022.0], [29.6, 1022.0], [29.7, 1022.0], [29.8, 1023.0], [29.9, 1023.0], [30.0, 1023.0], [30.1, 1023.0], [30.2, 1023.0], [30.3, 1023.0], [30.4, 1023.0], [30.5, 1024.0], [30.6, 1024.0], [30.7, 1024.0], [30.8, 1024.0], [30.9, 1024.0], [31.0, 1025.0], [31.1, 1025.0], [31.2, 1025.0], [31.3, 1025.0], [31.4, 1026.0], [31.5, 1026.0], [31.6, 1026.0], [31.7, 1026.0], [31.8, 1026.0], [31.9, 1026.0], [32.0, 1026.0], [32.1, 1027.0], [32.2, 1027.0], [32.3, 1027.0], [32.4, 1027.0], [32.5, 1027.0], [32.6, 1028.0], [32.7, 1028.0], [32.8, 1029.0], [32.9, 1029.0], [33.0, 1029.0], [33.1, 1030.0], [33.2, 1030.0], [33.3, 1031.0], [33.4, 1031.0], [33.5, 1031.0], [33.6, 1031.0], [33.7, 1032.0], [33.8, 1032.0], [33.9, 1032.0], [34.0, 1032.0], [34.1, 1033.0], [34.2, 1033.0], [34.3, 1033.0], [34.4, 1034.0], [34.5, 1034.0], [34.6, 1034.0], [34.7, 1034.0], [34.8, 1034.0], [34.9, 1034.0], [35.0, 1035.0], [35.1, 1035.0], [35.2, 1035.0], [35.3, 1036.0], [35.4, 1036.0], [35.5, 1036.0], [35.6, 1036.0], [35.7, 1037.0], [35.8, 1037.0], [35.9, 1037.0], [36.0, 1037.0], [36.1, 1038.0], [36.2, 1038.0], [36.3, 1038.0], [36.4, 1038.0], [36.5, 1038.0], [36.6, 1038.0], [36.7, 1039.0], [36.8, 1040.0], [36.9, 1040.0], [37.0, 1040.0], [37.1, 1041.0], [37.2, 1041.0], [37.3, 1041.0], [37.4, 1042.0], [37.5, 1042.0], [37.6, 1042.0], [37.7, 1042.0], [37.8, 1043.0], [37.9, 1043.0], [38.0, 1043.0], [38.1, 1043.0], [38.2, 1043.0], [38.3, 1044.0], [38.4, 1044.0], [38.5, 1045.0], [38.6, 1045.0], [38.7, 1045.0], [38.8, 1045.0], [38.9, 1046.0], [39.0, 1046.0], [39.1, 1046.0], [39.2, 1047.0], [39.3, 1047.0], [39.4, 1047.0], [39.5, 1047.0], [39.6, 1047.0], [39.7, 1047.0], [39.8, 1048.0], [39.9, 1048.0], [40.0, 1048.0], [40.1, 1048.0], [40.2, 1048.0], [40.3, 1049.0], [40.4, 1049.0], [40.5, 1049.0], [40.6, 1049.0], [40.7, 1049.0], [40.8, 1050.0], [40.9, 1050.0], [41.0, 1050.0], [41.1, 1050.0], [41.2, 1050.0], [41.3, 1051.0], [41.4, 1051.0], [41.5, 1051.0], [41.6, 1052.0], [41.7, 1052.0], [41.8, 1052.0], [41.9, 1052.0], [42.0, 1053.0], [42.1, 1053.0], [42.2, 1053.0], [42.3, 1053.0], [42.4, 1054.0], [42.5, 1054.0], [42.6, 1054.0], [42.7, 1054.0], [42.8, 1055.0], [42.9, 1055.0], [43.0, 1055.0], [43.1, 1055.0], [43.2, 1055.0], [43.3, 1056.0], [43.4, 1056.0], [43.5, 1056.0], [43.6, 1056.0], [43.7, 1056.0], [43.8, 1056.0], [43.9, 1057.0], [44.0, 1057.0], [44.1, 1057.0], [44.2, 1057.0], [44.3, 1058.0], [44.4, 1058.0], [44.5, 1058.0], [44.6, 1058.0], [44.7, 1058.0], [44.8, 1058.0], [44.9, 1058.0], [45.0, 1058.0], [45.1, 1059.0], [45.2, 1059.0], [45.3, 1059.0], [45.4, 1059.0], [45.5, 1059.0], [45.6, 1059.0], [45.7, 1060.0], [45.8, 1060.0], [45.9, 1060.0], [46.0, 1060.0], [46.1, 1060.0], [46.2, 1060.0], [46.3, 1061.0], [46.4, 1061.0], [46.5, 1061.0], [46.6, 1061.0], [46.7, 1062.0], [46.8, 1062.0], [46.9, 1062.0], [47.0, 1062.0], [47.1, 1062.0], [47.2, 1063.0], [47.3, 1063.0], [47.4, 1063.0], [47.5, 1064.0], [47.6, 1064.0], [47.7, 1064.0], [47.8, 1064.0], [47.9, 1064.0], [48.0, 1064.0], [48.1, 1064.0], [48.2, 1065.0], [48.3, 1065.0], [48.4, 1066.0], [48.5, 1066.0], [48.6, 1066.0], [48.7, 1066.0], [48.8, 1066.0], [48.9, 1066.0], [49.0, 1066.0], [49.1, 1067.0], [49.2, 1067.0], [49.3, 1067.0], [49.4, 1067.0], [49.5, 1067.0], [49.6, 1067.0], [49.7, 1067.0], [49.8, 1067.0], [49.9, 1067.0], [50.0, 1068.0], [50.1, 1068.0], [50.2, 1068.0], [50.3, 1068.0], [50.4, 1068.0], [50.5, 1068.0], [50.6, 1069.0], [50.7, 1069.0], [50.8, 1069.0], [50.9, 1069.0], [51.0, 1069.0], [51.1, 1069.0], [51.2, 1069.0], [51.3, 1070.0], [51.4, 1071.0], [51.5, 1071.0], [51.6, 1071.0], [51.7, 1071.0], [51.8, 1071.0], [51.9, 1072.0], [52.0, 1072.0], [52.1, 1072.0], [52.2, 1072.0], [52.3, 1072.0], [52.4, 1072.0], [52.5, 1072.0], [52.6, 1073.0], [52.7, 1073.0], [52.8, 1073.0], [52.9, 1073.0], [53.0, 1073.0], [53.1, 1074.0], [53.2, 1074.0], [53.3, 1074.0], [53.4, 1074.0], [53.5, 1075.0], [53.6, 1075.0], [53.7, 1075.0], [53.8, 1075.0], [53.9, 1075.0], [54.0, 1076.0], [54.1, 1076.0], [54.2, 1076.0], [54.3, 1076.0], [54.4, 1077.0], [54.5, 1077.0], [54.6, 1077.0], [54.7, 1077.0], [54.8, 1077.0], [54.9, 1078.0], [55.0, 1078.0], [55.1, 1078.0], [55.2, 1078.0], [55.3, 1078.0], [55.4, 1078.0], [55.5, 1078.0], [55.6, 1079.0], [55.7, 1079.0], [55.8, 1079.0], [55.9, 1080.0], [56.0, 1080.0], [56.1, 1081.0], [56.2, 1081.0], [56.3, 1081.0], [56.4, 1081.0], [56.5, 1081.0], [56.6, 1081.0], [56.7, 1081.0], [56.8, 1081.0], [56.9, 1081.0], [57.0, 1082.0], [57.1, 1082.0], [57.2, 1082.0], [57.3, 1082.0], [57.4, 1082.0], [57.5, 1082.0], [57.6, 1083.0], [57.7, 1083.0], [57.8, 1083.0], [57.9, 1083.0], [58.0, 1083.0], [58.1, 1083.0], [58.2, 1083.0], [58.3, 1084.0], [58.4, 1084.0], [58.5, 1084.0], [58.6, 1084.0], [58.7, 1084.0], [58.8, 1085.0], [58.9, 1085.0], [59.0, 1085.0], [59.1, 1085.0], [59.2, 1085.0], [59.3, 1085.0], [59.4, 1086.0], [59.5, 1086.0], [59.6, 1086.0], [59.7, 1087.0], [59.8, 1087.0], [59.9, 1087.0], [60.0, 1087.0], [60.1, 1088.0], [60.2, 1088.0], [60.3, 1088.0], [60.4, 1088.0], [60.5, 1088.0], [60.6, 1089.0], [60.7, 1089.0], [60.8, 1089.0], [60.9, 1089.0], [61.0, 1089.0], [61.1, 1090.0], [61.2, 1090.0], [61.3, 1090.0], [61.4, 1091.0], [61.5, 1091.0], [61.6, 1091.0], [61.7, 1091.0], [61.8, 1092.0], [61.9, 1092.0], [62.0, 1092.0], [62.1, 1092.0], [62.2, 1093.0], [62.3, 1093.0], [62.4, 1093.0], [62.5, 1093.0], [62.6, 1093.0], [62.7, 1093.0], [62.8, 1093.0], [62.9, 1094.0], [63.0, 1094.0], [63.1, 1094.0], [63.2, 1094.0], [63.3, 1095.0], [63.4, 1095.0], [63.5, 1095.0], [63.6, 1096.0], [63.7, 1096.0], [63.8, 1096.0], [63.9, 1096.0], [64.0, 1096.0], [64.1, 1096.0], [64.2, 1097.0], [64.3, 1097.0], [64.4, 1097.0], [64.5, 1097.0], [64.6, 1097.0], [64.7, 1098.0], [64.8, 1098.0], [64.9, 1098.0], [65.0, 1099.0], [65.1, 1099.0], [65.2, 1099.0], [65.3, 1099.0], [65.4, 1100.0], [65.5, 1100.0], [65.6, 1101.0], [65.7, 1101.0], [65.8, 1102.0], [65.9, 1102.0], [66.0, 1103.0], [66.1, 1103.0], [66.2, 1103.0], [66.3, 1103.0], [66.4, 1104.0], [66.5, 1104.0], [66.6, 1104.0], [66.7, 1105.0], [66.8, 1106.0], [66.9, 1107.0], [67.0, 1108.0], [67.1, 1108.0], [67.2, 1108.0], [67.3, 1108.0], [67.4, 1108.0], [67.5, 1109.0], [67.6, 1109.0], [67.7, 1109.0], [67.8, 1110.0], [67.9, 1111.0], [68.0, 1111.0], [68.1, 1111.0], [68.2, 1112.0], [68.3, 1112.0], [68.4, 1113.0], [68.5, 1113.0], [68.6, 1113.0], [68.7, 1114.0], [68.8, 1115.0], [68.9, 1115.0], [69.0, 1117.0], [69.1, 1119.0], [69.2, 1120.0], [69.3, 1121.0], [69.4, 1123.0], [69.5, 1124.0], [69.6, 1126.0], [69.7, 1128.0], [69.8, 1131.0], [69.9, 1132.0], [70.0, 1135.0], [70.1, 1139.0], [70.2, 1143.0], [70.3, 1146.0], [70.4, 1146.0], [70.5, 1149.0], [70.6, 1151.0], [70.7, 1153.0], [70.8, 1153.0], [70.9, 1156.0], [71.0, 1157.0], [71.1, 1160.0], [71.2, 1161.0], [71.3, 1162.0], [71.4, 1165.0], [71.5, 1166.0], [71.6, 1167.0], [71.7, 1169.0], [71.8, 1173.0], [71.9, 1174.0], [72.0, 1178.0], [72.1, 1179.0], [72.2, 1182.0], [72.3, 1186.0], [72.4, 1189.0], [72.5, 1191.0], [72.6, 1192.0], [72.7, 1196.0], [72.8, 1197.0], [72.9, 1201.0], [73.0, 1205.0], [73.1, 1206.0], [73.2, 1213.0], [73.3, 1216.0], [73.4, 1216.0], [73.5, 1223.0], [73.6, 1225.0], [73.7, 1229.0], [73.8, 1232.0], [73.9, 1235.0], [74.0, 1245.0], [74.1, 1246.0], [74.2, 1247.0], [74.3, 1247.0], [74.4, 1249.0], [74.5, 1252.0], [74.6, 1253.0], [74.7, 1259.0], [74.8, 1270.0], [74.9, 1271.0], [75.0, 1273.0], [75.1, 1285.0], [75.2, 1285.0], [75.3, 1288.0], [75.4, 1291.0], [75.5, 1291.0], [75.6, 1296.0], [75.7, 1297.0], [75.8, 1299.0], [75.9, 1302.0], [76.0, 1303.0], [76.1, 1303.0], [76.2, 1307.0], [76.3, 1314.0], [76.4, 1316.0], [76.5, 1323.0], [76.6, 1324.0], [76.7, 1327.0], [76.8, 1333.0], [76.9, 1343.0], [77.0, 1344.0], [77.1, 1353.0], [77.2, 1355.0], [77.3, 1356.0], [77.4, 1364.0], [77.5, 1368.0], [77.6, 1370.0], [77.7, 1385.0], [77.8, 1389.0], [77.9, 1392.0], [78.0, 1404.0], [78.1, 1413.0], [78.2, 1413.0], [78.3, 1419.0], [78.4, 1425.0], [78.5, 1431.0], [78.6, 1442.0], [78.7, 1450.0], [78.8, 1451.0], [78.9, 1454.0], [79.0, 1456.0], [79.1, 1461.0], [79.2, 1463.0], [79.3, 1466.0], [79.4, 1471.0], [79.5, 1474.0], [79.6, 1477.0], [79.7, 1477.0], [79.8, 1479.0], [79.9, 1483.0], [80.0, 1486.0], [80.1, 1491.0], [80.2, 1492.0], [80.3, 1492.0], [80.4, 1495.0], [80.5, 1500.0], [80.6, 1511.0], [80.7, 1517.0], [80.8, 1521.0], [80.9, 1523.0], [81.0, 1533.0], [81.1, 1539.0], [81.2, 1547.0], [81.3, 1551.0], [81.4, 1556.0], [81.5, 1557.0], [81.6, 1566.0], [81.7, 1575.0], [81.8, 1575.0], [81.9, 1577.0], [82.0, 1587.0], [82.1, 1592.0], [82.2, 1593.0], [82.3, 1596.0], [82.4, 1598.0], [82.5, 1601.0], [82.6, 1606.0], [82.7, 1607.0], [82.8, 1608.0], [82.9, 1615.0], [83.0, 1622.0], [83.1, 1627.0], [83.2, 1628.0], [83.3, 1636.0], [83.4, 1643.0], [83.5, 1649.0], [83.6, 1651.0], [83.7, 1667.0], [83.8, 1675.0], [83.9, 1677.0], [84.0, 1681.0], [84.1, 1692.0], [84.2, 1695.0], [84.3, 1703.0], [84.4, 1708.0], [84.5, 1710.0], [84.6, 1722.0], [84.7, 1728.0], [84.8, 1733.0], [84.9, 1736.0], [85.0, 1738.0], [85.1, 1748.0], [85.2, 1757.0], [85.3, 1758.0], [85.4, 1761.0], [85.5, 1765.0], [85.6, 1778.0], [85.7, 1780.0], [85.8, 1784.0], [85.9, 1785.0], [86.0, 1797.0], [86.1, 1811.0], [86.2, 1814.0], [86.3, 1821.0], [86.4, 1826.0], [86.5, 1831.0], [86.6, 1835.0], [86.7, 1836.0], [86.8, 1841.0], [86.9, 1841.0], [87.0, 1849.0], [87.1, 1858.0], [87.2, 1862.0], [87.3, 1871.0], [87.4, 1884.0], [87.5, 1895.0], [87.6, 1908.0], [87.7, 1925.0], [87.8, 1930.0], [87.9, 1939.0], [88.0, 1940.0], [88.1, 1945.0], [88.2, 1947.0], [88.3, 1952.0], [88.4, 1957.0], [88.5, 1962.0], [88.6, 1970.0], [88.7, 1973.0], [88.8, 1984.0], [88.9, 1993.0], [89.0, 1996.0], [89.1, 2002.0], [89.2, 2006.0], [89.3, 2009.0], [89.4, 2014.0], [89.5, 2020.0], [89.6, 2021.0], [89.7, 2023.0], [89.8, 2028.0], [89.9, 2028.0], [90.0, 2034.0], [90.1, 2040.0], [90.2, 2042.0], [90.3, 2058.0], [90.4, 2066.0], [90.5, 2067.0], [90.6, 2070.0], [90.7, 2073.0], [90.8, 2074.0], [90.9, 2081.0], [91.0, 2086.0], [91.1, 2090.0], [91.2, 2097.0], [91.3, 2106.0], [91.4, 2117.0], [91.5, 2122.0], [91.6, 2140.0], [91.7, 2141.0], [91.8, 2162.0], [91.9, 2164.0], [92.0, 2166.0], [92.1, 2184.0], [92.2, 2187.0], [92.3, 2188.0], [92.4, 2197.0], [92.5, 2226.0], [92.6, 2237.0], [92.7, 2243.0], [92.8, 2260.0], [92.9, 2265.0], [93.0, 2271.0], [93.1, 2290.0], [93.2, 2291.0], [93.3, 2315.0], [93.4, 2345.0], [93.5, 2346.0], [93.6, 2366.0], [93.7, 2376.0], [93.8, 2379.0], [93.9, 2385.0], [94.0, 2393.0], [94.1, 2418.0], [94.2, 2434.0], [94.3, 2467.0], [94.4, 2471.0], [94.5, 2484.0], [94.6, 2494.0], [94.7, 2500.0], [94.8, 2510.0], [94.9, 2533.0], [95.0, 2534.0], [95.1, 2558.0], [95.2, 2620.0], [95.3, 2631.0], [95.4, 2662.0], [95.5, 2690.0], [95.6, 2699.0], [95.7, 2738.0], [95.8, 2743.0], [95.9, 2746.0], [96.0, 2798.0], [96.1, 2798.0], [96.2, 2838.0], [96.3, 2959.0], [96.4, 2996.0], [96.5, 3016.0], [96.6, 3040.0], [96.7, 3094.0], [96.8, 3095.0], [96.9, 3147.0], [97.0, 3159.0], [97.1, 3224.0], [97.2, 3297.0], [97.3, 3313.0], [97.4, 3317.0], [97.5, 3479.0], [97.6, 3521.0], [97.7, 3552.0], [97.8, 3651.0], [97.9, 3677.0], [98.0, 3689.0], [98.1, 3788.0], [98.2, 3847.0], [98.3, 3858.0], [98.4, 3924.0], [98.5, 3993.0], [98.6, 4016.0], [98.7, 4182.0], [98.8, 4218.0], [98.9, 4306.0], [99.0, 4804.0], [99.1, 5037.0], [99.2, 5067.0], [99.3, 5117.0], [99.4, 5157.0], [99.5, 5479.0], [99.6, 5696.0], [99.7, 6568.0], [99.8, 6918.0], [99.9, 7151.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 240.0], [0.1, 241.0], [0.2, 241.0], [0.3, 241.0], [0.4, 242.0], [0.5, 243.0], [0.6, 243.0], [0.7, 244.0], [0.8, 244.0], [0.9, 244.0], [1.0, 244.0], [1.1, 244.0], [1.2, 244.0], [1.3, 245.0], [1.4, 245.0], [1.5, 245.0], [1.6, 245.0], [1.7, 245.0], [1.8, 245.0], [1.9, 245.0], [2.0, 245.0], [2.1, 245.0], [2.2, 245.0], [2.3, 246.0], [2.4, 246.0], [2.5, 246.0], [2.6, 246.0], [2.7, 246.0], [2.8, 246.0], [2.9, 246.0], [3.0, 246.0], [3.1, 246.0], [3.2, 246.0], [3.3, 246.0], [3.4, 246.0], [3.5, 246.0], [3.6, 246.0], [3.7, 247.0], [3.8, 247.0], [3.9, 247.0], [4.0, 247.0], [4.1, 247.0], [4.2, 247.0], [4.3, 247.0], [4.4, 247.0], [4.5, 247.0], [4.6, 247.0], [4.7, 247.0], [4.8, 247.0], [4.9, 247.0], [5.0, 248.0], [5.1, 248.0], [5.2, 248.0], [5.3, 248.0], [5.4, 248.0], [5.5, 248.0], [5.6, 248.0], [5.7, 248.0], [5.8, 248.0], [5.9, 248.0], [6.0, 248.0], [6.1, 248.0], [6.2, 248.0], [6.3, 248.0], [6.4, 248.0], [6.5, 249.0], [6.6, 249.0], [6.7, 249.0], [6.8, 249.0], [6.9, 249.0], [7.0, 249.0], [7.1, 249.0], [7.2, 249.0], [7.3, 249.0], [7.4, 249.0], [7.5, 249.0], [7.6, 249.0], [7.7, 249.0], [7.8, 249.0], [7.9, 249.0], [8.0, 249.0], [8.1, 249.0], [8.2, 249.0], [8.3, 250.0], [8.4, 250.0], [8.5, 250.0], [8.6, 250.0], [8.7, 250.0], [8.8, 250.0], [8.9, 250.0], [9.0, 250.0], [9.1, 250.0], [9.2, 250.0], [9.3, 250.0], [9.4, 250.0], [9.5, 250.0], [9.6, 250.0], [9.7, 250.0], [9.8, 250.0], [9.9, 250.0], [10.0, 250.0], [10.1, 251.0], [10.2, 251.0], [10.3, 251.0], [10.4, 251.0], [10.5, 251.0], [10.6, 251.0], [10.7, 251.0], [10.8, 251.0], [10.9, 251.0], [11.0, 251.0], [11.1, 251.0], [11.2, 251.0], [11.3, 251.0], [11.4, 251.0], [11.5, 251.0], [11.6, 251.0], [11.7, 251.0], [11.8, 251.0], [11.9, 251.0], [12.0, 251.0], [12.1, 251.0], [12.2, 251.0], [12.3, 251.0], [12.4, 251.0], [12.5, 251.0], [12.6, 251.0], [12.7, 251.0], [12.8, 251.0], [12.9, 251.0], [13.0, 252.0], [13.1, 252.0], [13.2, 252.0], [13.3, 252.0], [13.4, 252.0], [13.5, 252.0], [13.6, 252.0], [13.7, 252.0], [13.8, 252.0], [13.9, 252.0], [14.0, 252.0], [14.1, 252.0], [14.2, 252.0], [14.3, 252.0], [14.4, 252.0], [14.5, 252.0], [14.6, 252.0], [14.7, 252.0], [14.8, 252.0], [14.9, 252.0], [15.0, 252.0], [15.1, 252.0], [15.2, 252.0], [15.3, 252.0], [15.4, 252.0], [15.5, 252.0], [15.6, 252.0], [15.7, 252.0], [15.8, 252.0], [15.9, 252.0], [16.0, 252.0], [16.1, 253.0], [16.2, 253.0], [16.3, 253.0], [16.4, 253.0], [16.5, 253.0], [16.6, 253.0], [16.7, 253.0], [16.8, 253.0], [16.9, 253.0], [17.0, 253.0], [17.1, 253.0], [17.2, 253.0], [17.3, 253.0], [17.4, 253.0], [17.5, 253.0], [17.6, 253.0], [17.7, 253.0], [17.8, 253.0], [17.9, 253.0], [18.0, 253.0], [18.1, 253.0], [18.2, 253.0], [18.3, 253.0], [18.4, 253.0], [18.5, 253.0], [18.6, 253.0], [18.7, 254.0], [18.8, 254.0], [18.9, 254.0], [19.0, 254.0], [19.1, 254.0], [19.2, 254.0], [19.3, 254.0], [19.4, 254.0], [19.5, 254.0], [19.6, 254.0], [19.7, 254.0], [19.8, 254.0], [19.9, 254.0], [20.0, 254.0], [20.1, 254.0], [20.2, 254.0], [20.3, 254.0], [20.4, 254.0], [20.5, 254.0], [20.6, 254.0], [20.7, 254.0], [20.8, 254.0], [20.9, 254.0], [21.0, 254.0], [21.1, 254.0], [21.2, 254.0], [21.3, 254.0], [21.4, 254.0], [21.5, 254.0], [21.6, 254.0], [21.7, 254.0], [21.8, 254.0], [21.9, 254.0], [22.0, 255.0], [22.1, 255.0], [22.2, 255.0], [22.3, 255.0], [22.4, 255.0], [22.5, 255.0], [22.6, 255.0], [22.7, 255.0], [22.8, 255.0], [22.9, 255.0], [23.0, 255.0], [23.1, 255.0], [23.2, 255.0], [23.3, 255.0], [23.4, 255.0], [23.5, 255.0], [23.6, 255.0], [23.7, 255.0], [23.8, 255.0], [23.9, 255.0], [24.0, 255.0], [24.1, 255.0], [24.2, 255.0], [24.3, 255.0], [24.4, 255.0], [24.5, 255.0], [24.6, 255.0], [24.7, 255.0], [24.8, 255.0], [24.9, 256.0], [25.0, 256.0], [25.1, 256.0], [25.2, 256.0], [25.3, 256.0], [25.4, 256.0], [25.5, 256.0], [25.6, 256.0], [25.7, 256.0], [25.8, 256.0], [25.9, 256.0], [26.0, 256.0], [26.1, 256.0], [26.2, 256.0], [26.3, 256.0], [26.4, 256.0], [26.5, 256.0], [26.6, 256.0], [26.7, 256.0], [26.8, 256.0], [26.9, 256.0], [27.0, 256.0], [27.1, 256.0], [27.2, 256.0], [27.3, 256.0], [27.4, 256.0], [27.5, 256.0], [27.6, 256.0], [27.7, 257.0], [27.8, 257.0], [27.9, 257.0], [28.0, 257.0], [28.1, 257.0], [28.2, 257.0], [28.3, 257.0], [28.4, 257.0], [28.5, 257.0], [28.6, 257.0], [28.7, 257.0], [28.8, 257.0], [28.9, 257.0], [29.0, 257.0], [29.1, 257.0], [29.2, 257.0], [29.3, 257.0], [29.4, 257.0], [29.5, 257.0], [29.6, 257.0], [29.7, 257.0], [29.8, 257.0], [29.9, 257.0], [30.0, 257.0], [30.1, 257.0], [30.2, 257.0], [30.3, 257.0], [30.4, 258.0], [30.5, 258.0], [30.6, 258.0], [30.7, 258.0], [30.8, 258.0], [30.9, 258.0], [31.0, 258.0], [31.1, 258.0], [31.2, 258.0], [31.3, 258.0], [31.4, 258.0], [31.5, 258.0], [31.6, 258.0], [31.7, 258.0], [31.8, 258.0], [31.9, 258.0], [32.0, 258.0], [32.1, 258.0], [32.2, 258.0], [32.3, 259.0], [32.4, 259.0], [32.5, 259.0], [32.6, 259.0], [32.7, 259.0], [32.8, 259.0], [32.9, 259.0], [33.0, 259.0], [33.1, 259.0], [33.2, 259.0], [33.3, 259.0], [33.4, 259.0], [33.5, 259.0], [33.6, 259.0], [33.7, 259.0], [33.8, 259.0], [33.9, 259.0], [34.0, 259.0], [34.1, 259.0], [34.2, 259.0], [34.3, 260.0], [34.4, 260.0], [34.5, 260.0], [34.6, 260.0], [34.7, 260.0], [34.8, 260.0], [34.9, 260.0], [35.0, 260.0], [35.1, 260.0], [35.2, 260.0], [35.3, 260.0], [35.4, 260.0], [35.5, 260.0], [35.6, 260.0], [35.7, 260.0], [35.8, 260.0], [35.9, 260.0], [36.0, 260.0], [36.1, 260.0], [36.2, 260.0], [36.3, 260.0], [36.4, 261.0], [36.5, 261.0], [36.6, 261.0], [36.7, 261.0], [36.8, 261.0], [36.9, 261.0], [37.0, 261.0], [37.1, 261.0], [37.2, 261.0], [37.3, 261.0], [37.4, 261.0], [37.5, 261.0], [37.6, 261.0], [37.7, 261.0], [37.8, 261.0], [37.9, 261.0], [38.0, 261.0], [38.1, 261.0], [38.2, 261.0], [38.3, 262.0], [38.4, 262.0], [38.5, 262.0], [38.6, 262.0], [38.7, 262.0], [38.8, 262.0], [38.9, 262.0], [39.0, 262.0], [39.1, 262.0], [39.2, 262.0], [39.3, 262.0], [39.4, 262.0], [39.5, 262.0], [39.6, 262.0], [39.7, 262.0], [39.8, 262.0], [39.9, 262.0], [40.0, 262.0], [40.1, 263.0], [40.2, 263.0], [40.3, 263.0], [40.4, 263.0], [40.5, 263.0], [40.6, 263.0], [40.7, 263.0], [40.8, 263.0], [40.9, 263.0], [41.0, 263.0], [41.1, 263.0], [41.2, 263.0], [41.3, 263.0], [41.4, 263.0], [41.5, 263.0], [41.6, 264.0], [41.7, 264.0], [41.8, 264.0], [41.9, 264.0], [42.0, 264.0], [42.1, 264.0], [42.2, 264.0], [42.3, 264.0], [42.4, 264.0], [42.5, 264.0], [42.6, 264.0], [42.7, 264.0], [42.8, 264.0], [42.9, 264.0], [43.0, 264.0], [43.1, 264.0], [43.2, 264.0], [43.3, 264.0], [43.4, 265.0], [43.5, 265.0], [43.6, 265.0], [43.7, 265.0], [43.8, 265.0], [43.9, 265.0], [44.0, 265.0], [44.1, 265.0], [44.2, 265.0], [44.3, 265.0], [44.4, 265.0], [44.5, 265.0], [44.6, 265.0], [44.7, 265.0], [44.8, 265.0], [44.9, 265.0], [45.0, 265.0], [45.1, 265.0], [45.2, 266.0], [45.3, 266.0], [45.4, 266.0], [45.5, 266.0], [45.6, 266.0], [45.7, 266.0], [45.8, 266.0], [45.9, 266.0], [46.0, 266.0], [46.1, 266.0], [46.2, 266.0], [46.3, 266.0], [46.4, 266.0], [46.5, 266.0], [46.6, 266.0], [46.7, 266.0], [46.8, 266.0], [46.9, 266.0], [47.0, 267.0], [47.1, 267.0], [47.2, 267.0], [47.3, 267.0], [47.4, 267.0], [47.5, 267.0], [47.6, 267.0], [47.7, 267.0], [47.8, 267.0], [47.9, 267.0], [48.0, 267.0], [48.1, 267.0], [48.2, 267.0], [48.3, 267.0], [48.4, 267.0], [48.5, 268.0], [48.6, 268.0], [48.7, 268.0], [48.8, 268.0], [48.9, 268.0], [49.0, 268.0], [49.1, 268.0], [49.2, 268.0], [49.3, 268.0], [49.4, 268.0], [49.5, 268.0], [49.6, 268.0], [49.7, 268.0], [49.8, 268.0], [49.9, 268.0], [50.0, 268.0], [50.1, 268.0], [50.2, 268.0], [50.3, 268.0], [50.4, 268.0], [50.5, 268.0], [50.6, 268.0], [50.7, 268.0], [50.8, 268.0], [50.9, 268.0], [51.0, 268.0], [51.1, 268.0], [51.2, 268.0], [51.3, 268.0], [51.4, 268.0], [51.5, 268.0], [51.6, 268.0], [51.7, 269.0], [51.8, 269.0], [51.9, 269.0], [52.0, 269.0], [52.1, 269.0], [52.2, 269.0], [52.3, 269.0], [52.4, 269.0], [52.5, 269.0], [52.6, 269.0], [52.7, 269.0], [52.8, 269.0], [52.9, 269.0], [53.0, 269.0], [53.1, 269.0], [53.2, 269.0], [53.3, 269.0], [53.4, 269.0], [53.5, 269.0], [53.6, 270.0], [53.7, 270.0], [53.8, 270.0], [53.9, 270.0], [54.0, 270.0], [54.1, 270.0], [54.2, 270.0], [54.3, 270.0], [54.4, 270.0], [54.5, 270.0], [54.6, 270.0], [54.7, 270.0], [54.8, 270.0], [54.9, 270.0], [55.0, 270.0], [55.1, 270.0], [55.2, 270.0], [55.3, 270.0], [55.4, 270.0], [55.5, 270.0], [55.6, 270.0], [55.7, 270.0], [55.8, 270.0], [55.9, 270.0], [56.0, 270.0], [56.1, 271.0], [56.2, 271.0], [56.3, 271.0], [56.4, 271.0], [56.5, 271.0], [56.6, 271.0], [56.7, 271.0], [56.8, 271.0], [56.9, 271.0], [57.0, 271.0], [57.1, 271.0], [57.2, 271.0], [57.3, 271.0], [57.4, 271.0], [57.5, 271.0], [57.6, 271.0], [57.7, 271.0], [57.8, 271.0], [57.9, 272.0], [58.0, 272.0], [58.1, 272.0], [58.2, 272.0], [58.3, 272.0], [58.4, 272.0], [58.5, 272.0], [58.6, 272.0], [58.7, 272.0], [58.8, 272.0], [58.9, 272.0], [59.0, 272.0], [59.1, 272.0], [59.2, 272.0], [59.3, 272.0], [59.4, 272.0], [59.5, 272.0], [59.6, 272.0], [59.7, 272.0], [59.8, 272.0], [59.9, 272.0], [60.0, 272.0], [60.1, 272.0], [60.2, 272.0], [60.3, 273.0], [60.4, 273.0], [60.5, 273.0], [60.6, 273.0], [60.7, 273.0], [60.8, 273.0], [60.9, 273.0], [61.0, 273.0], [61.1, 273.0], [61.2, 273.0], [61.3, 273.0], [61.4, 273.0], [61.5, 273.0], [61.6, 273.0], [61.7, 273.0], [61.8, 273.0], [61.9, 273.0], [62.0, 273.0], [62.1, 273.0], [62.2, 273.0], [62.3, 274.0], [62.4, 274.0], [62.5, 274.0], [62.6, 274.0], [62.7, 274.0], [62.8, 274.0], [62.9, 274.0], [63.0, 274.0], [63.1, 274.0], [63.2, 274.0], [63.3, 274.0], [63.4, 274.0], [63.5, 274.0], [63.6, 274.0], [63.7, 274.0], [63.8, 274.0], [63.9, 274.0], [64.0, 274.0], [64.1, 274.0], [64.2, 274.0], [64.3, 274.0], [64.4, 275.0], [64.5, 275.0], [64.6, 275.0], [64.7, 275.0], [64.8, 275.0], [64.9, 275.0], [65.0, 275.0], [65.1, 275.0], [65.2, 275.0], [65.3, 275.0], [65.4, 275.0], [65.5, 275.0], [65.6, 275.0], [65.7, 275.0], [65.8, 275.0], [65.9, 275.0], [66.0, 275.0], [66.1, 275.0], [66.2, 275.0], [66.3, 275.0], [66.4, 275.0], [66.5, 275.0], [66.6, 276.0], [66.7, 276.0], [66.8, 276.0], [66.9, 276.0], [67.0, 276.0], [67.1, 276.0], [67.2, 276.0], [67.3, 276.0], [67.4, 276.0], [67.5, 276.0], [67.6, 276.0], [67.7, 276.0], [67.8, 276.0], [67.9, 276.0], [68.0, 276.0], [68.1, 277.0], [68.2, 277.0], [68.3, 277.0], [68.4, 277.0], [68.5, 277.0], [68.6, 277.0], [68.7, 277.0], [68.8, 277.0], [68.9, 277.0], [69.0, 277.0], [69.1, 277.0], [69.2, 277.0], [69.3, 277.0], [69.4, 277.0], [69.5, 277.0], [69.6, 277.0], [69.7, 278.0], [69.8, 278.0], [69.9, 278.0], [70.0, 278.0], [70.1, 278.0], [70.2, 278.0], [70.3, 278.0], [70.4, 278.0], [70.5, 278.0], [70.6, 278.0], [70.7, 279.0], [70.8, 279.0], [70.9, 279.0], [71.0, 279.0], [71.1, 279.0], [71.2, 279.0], [71.3, 279.0], [71.4, 279.0], [71.5, 279.0], [71.6, 279.0], [71.7, 280.0], [71.8, 280.0], [71.9, 280.0], [72.0, 280.0], [72.1, 280.0], [72.2, 280.0], [72.3, 280.0], [72.4, 280.0], [72.5, 280.0], [72.6, 281.0], [72.7, 281.0], [72.8, 281.0], [72.9, 281.0], [73.0, 281.0], [73.1, 281.0], [73.2, 281.0], [73.3, 281.0], [73.4, 281.0], [73.5, 282.0], [73.6, 282.0], [73.7, 282.0], [73.8, 282.0], [73.9, 282.0], [74.0, 282.0], [74.1, 283.0], [74.2, 283.0], [74.3, 283.0], [74.4, 283.0], [74.5, 284.0], [74.6, 284.0], [74.7, 284.0], [74.8, 284.0], [74.9, 284.0], [75.0, 284.0], [75.1, 285.0], [75.2, 285.0], [75.3, 285.0], [75.4, 286.0], [75.5, 286.0], [75.6, 286.0], [75.7, 286.0], [75.8, 287.0], [75.9, 287.0], [76.0, 287.0], [76.1, 287.0], [76.2, 288.0], [76.3, 288.0], [76.4, 288.0], [76.5, 289.0], [76.6, 290.0], [76.7, 291.0], [76.8, 291.0], [76.9, 292.0], [77.0, 292.0], [77.1, 292.0], [77.2, 292.0], [77.3, 292.0], [77.4, 294.0], [77.5, 295.0], [77.6, 295.0], [77.7, 296.0], [77.8, 298.0], [77.9, 298.0], [78.0, 299.0], [78.1, 300.0], [78.2, 300.0], [78.3, 300.0], [78.4, 300.0], [78.5, 301.0], [78.6, 302.0], [78.7, 302.0], [78.8, 302.0], [78.9, 303.0], [79.0, 303.0], [79.1, 303.0], [79.2, 305.0], [79.3, 307.0], [79.4, 308.0], [79.5, 308.0], [79.6, 309.0], [79.7, 309.0], [79.8, 311.0], [79.9, 313.0], [80.0, 314.0], [80.1, 315.0], [80.2, 317.0], [80.3, 317.0], [80.4, 317.0], [80.5, 319.0], [80.6, 319.0], [80.7, 320.0], [80.8, 320.0], [80.9, 322.0], [81.0, 322.0], [81.1, 322.0], [81.2, 322.0], [81.3, 324.0], [81.4, 324.0], [81.5, 324.0], [81.6, 324.0], [81.7, 328.0], [81.8, 329.0], [81.9, 329.0], [82.0, 330.0], [82.1, 330.0], [82.2, 331.0], [82.3, 332.0], [82.4, 332.0], [82.5, 333.0], [82.6, 333.0], [82.7, 335.0], [82.8, 337.0], [82.9, 338.0], [83.0, 338.0], [83.1, 340.0], [83.2, 341.0], [83.3, 342.0], [83.4, 344.0], [83.5, 345.0], [83.6, 345.0], [83.7, 346.0], [83.8, 346.0], [83.9, 346.0], [84.0, 350.0], [84.1, 354.0], [84.2, 355.0], [84.3, 355.0], [84.4, 359.0], [84.5, 359.0], [84.6, 362.0], [84.7, 363.0], [84.8, 367.0], [84.9, 370.0], [85.0, 372.0], [85.1, 373.0], [85.2, 377.0], [85.3, 379.0], [85.4, 379.0], [85.5, 380.0], [85.6, 381.0], [85.7, 383.0], [85.8, 384.0], [85.9, 387.0], [86.0, 388.0], [86.1, 388.0], [86.2, 391.0], [86.3, 392.0], [86.4, 392.0], [86.5, 392.0], [86.6, 393.0], [86.7, 396.0], [86.8, 396.0], [86.9, 398.0], [87.0, 400.0], [87.1, 401.0], [87.2, 404.0], [87.3, 406.0], [87.4, 406.0], [87.5, 408.0], [87.6, 411.0], [87.7, 413.0], [87.8, 413.0], [87.9, 414.0], [88.0, 416.0], [88.1, 419.0], [88.2, 419.0], [88.3, 419.0], [88.4, 420.0], [88.5, 421.0], [88.6, 424.0], [88.7, 425.0], [88.8, 428.0], [88.9, 432.0], [89.0, 434.0], [89.1, 437.0], [89.2, 442.0], [89.3, 443.0], [89.4, 444.0], [89.5, 446.0], [89.6, 447.0], [89.7, 449.0], [89.8, 450.0], [89.9, 450.0], [90.0, 451.0], [90.1, 452.0], [90.2, 453.0], [90.3, 456.0], [90.4, 459.0], [90.5, 459.0], [90.6, 464.0], [90.7, 466.0], [90.8, 466.0], [90.9, 474.0], [91.0, 475.0], [91.1, 475.0], [91.2, 478.0], [91.3, 483.0], [91.4, 484.0], [91.5, 488.0], [91.6, 491.0], [91.7, 494.0], [91.8, 496.0], [91.9, 497.0], [92.0, 497.0], [92.1, 500.0], [92.2, 504.0], [92.3, 505.0], [92.4, 505.0], [92.5, 509.0], [92.6, 512.0], [92.7, 514.0], [92.8, 516.0], [92.9, 517.0], [93.0, 519.0], [93.1, 520.0], [93.2, 520.0], [93.3, 525.0], [93.4, 530.0], [93.5, 530.0], [93.6, 534.0], [93.7, 535.0], [93.8, 536.0], [93.9, 536.0], [94.0, 537.0], [94.1, 538.0], [94.2, 541.0], [94.3, 547.0], [94.4, 547.0], [94.5, 548.0], [94.6, 553.0], [94.7, 554.0], [94.8, 554.0], [94.9, 560.0], [95.0, 562.0], [95.1, 563.0], [95.2, 563.0], [95.3, 569.0], [95.4, 570.0], [95.5, 571.0], [95.6, 571.0], [95.7, 582.0], [95.8, 597.0], [95.9, 603.0], [96.0, 606.0], [96.1, 615.0], [96.2, 619.0], [96.3, 620.0], [96.4, 628.0], [96.5, 641.0], [96.6, 652.0], [96.7, 658.0], [96.8, 658.0], [96.9, 664.0], [97.0, 675.0], [97.1, 684.0], [97.2, 686.0], [97.3, 691.0], [97.4, 695.0], [97.5, 716.0], [97.6, 725.0], [97.7, 726.0], [97.8, 727.0], [97.9, 774.0], [98.0, 777.0], [98.1, 795.0], [98.2, 824.0], [98.3, 835.0], [98.4, 836.0], [98.5, 868.0], [98.6, 881.0], [98.7, 893.0], [98.8, 902.0], [98.9, 902.0], [99.0, 1033.0], [99.1, 1209.0], [99.2, 1231.0], [99.3, 1314.0], [99.4, 1419.0], [99.5, 1490.0], [99.6, 1618.0], [99.7, 1786.0], [99.8, 1810.0], [99.9, 2120.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 1308.0, "series": [{"data": [[2100.0, 1.0], [600.0, 30.0], [700.0, 17.0], [200.0, 1308.0], [800.0, 4.0], [900.0, 6.0], [1000.0, 2.0], [1100.0, 3.0], [300.0, 152.0], [1200.0, 8.0], [1300.0, 2.0], [1400.0, 2.0], [400.0, 83.0], [500.0, 48.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[900.0, 224.0], [1000.0, 864.0], [1100.0, 126.0], [1200.0, 49.0], [1300.0, 35.0], [1400.0, 43.0], [1500.0, 33.0], [1600.0, 30.0], [1700.0, 29.0], [1800.0, 26.0], [1900.0, 24.0], [2000.0, 37.0], [2100.0, 21.0], [2200.0, 13.0], [2300.0, 13.0], [2400.0, 10.0], [2500.0, 9.0], [2600.0, 7.0], [2700.0, 9.0], [2800.0, 2.0], [2900.0, 3.0], [3000.0, 6.0], [3100.0, 4.0], [3300.0, 4.0], [3200.0, 3.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 5.0], [3700.0, 2.0], [3800.0, 4.0], [3900.0, 3.0], [4000.0, 2.0], [4100.0, 2.0], [4300.0, 1.0], [4200.0, 1.0], [4500.0, 1.0], [4800.0, 1.0], [5000.0, 4.0], [5100.0, 3.0], [5600.0, 2.0], [5400.0, 1.0], [6000.0, 1.0], [6500.0, 1.0], [6900.0, 2.0], [7100.0, 1.0], [8000.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[8200.0, 1.0], [2100.0, 1.0], [600.0, 26.0], [700.0, 12.0], [200.0, 1300.0], [800.0, 11.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 1.0], [300.0, 148.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 1.0], [400.0, 86.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 1.0], [1900.0, 1.0], [500.0, 63.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3079.0, "series": [{"data": [[0.0, 3079.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1586.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 332.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.256756756756756, "minX": 1.741548E12, "maxY": 8.674948240165634, "series": [{"data": [[1.74154812E12, 8.674948240165634], [1.7415483E12, 4.47], [1.7415486E12, 4.256756756756756], [1.74154824E12, 7.6520874751491075], [1.74154842E12, 4.460000000000001], [1.74154836E12, 4.470941883767534], [1.74154854E12, 4.504000000000001], [1.74154806E12, 5.916167664670658], [1.741548E12, 4.579196217494089], [1.74154818E12, 8.487378640776699], [1.74154848E12, 4.494]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7415486E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 254.0, "minX": 1.0, "maxY": 6001.333333333333, "series": [{"data": [[8.0, 450.3015873015874], [2.0, 257.0], [9.0, 447.4444444444444], [10.0, 556.825], [11.0, 494.45454545454544], [12.0, 499.5], [13.0, 678.3846153846154], [14.0, 521.3157894736843], [15.0, 896.75], [4.0, 262.8960612691468], [16.0, 999.3], [17.0, 363.3333333333333], [18.0, 298.33333333333337], [5.0, 265.58139534883736], [20.0, 560.0], [21.0, 446.8888888888889], [6.0, 323.5346534653465], [7.0, 381.3827160493827]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[5.566626650660256, 312.73709483793544]], "isOverall": false, "label": "Booking-Aggregated", "isController": false}, {"data": [[8.0, 1825.6666666666667], [2.0, 1001.0], [9.0, 1959.5], [10.0, 2267.272727272728], [11.0, 2352.1428571428573], [12.0, 2649.1111111111113], [3.0, 1064.0], [13.0, 3137.3846153846152], [14.0, 3379.5333333333333], [15.0, 3327.8888888888887], [4.0, 1025.4749721913252], [16.0, 3657.1666666666665], [17.0, 3023.5], [18.0, 2971.333333333333], [19.0, 4804.0], [5.0, 1152.0091743119267], [20.0, 6001.333333333333], [21.0, 4303.357142857143], [6.0, 1325.0898876404494], [7.0, 1715.4324324324316]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[5.60744297719087, 1332.811524609845]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[8.0, 442.0750000000001], [2.0, 278.0], [9.0, 459.01315789473676], [10.0, 580.5434782608694], [11.0, 489.5882352941176], [12.0, 647.5833333333333], [3.0, 256.0], [13.0, 528.0], [14.0, 491.0], [15.0, 1022.7499999999998], [16.0, 650.0909090909091], [4.0, 257.5], [1.0, 254.0], [17.0, 256.0], [18.0, 451.33333333333337], [5.0, 263.8037542662114], [20.0, 1618.0], [21.0, 506.2], [22.0, 491.0], [6.0, 312.135593220339], [7.0, 477.97499999999997]], "isOverall": false, "label": "Search Booking", "isController": false}, {"data": [[6.124849939975982, 321.0864345738301]], "isOverall": false, "label": "Search Booking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 22.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 340.3666666666667, "minX": 1.741548E12, "maxY": 7507.333333333333, "series": [{"data": [[1.74154812E12, 7044.45], [1.7415483E12, 7294.583333333333], [1.7415486E12, 1078.8833333333334], [1.74154824E12, 7329.983333333334], [1.74154842E12, 7281.633333333333], [1.74154836E12, 7276.85], [1.74154854E12, 7291.966666666666], [1.74154806E12, 7295.933333333333], [1.741548E12, 6165.15], [1.74154818E12, 7507.333333333333], [1.74154848E12, 7291.783333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74154812E12, 2218.4], [1.7415483E12, 2298.7], [1.7415486E12, 340.3666666666667], [1.74154824E12, 2309.15], [1.74154842E12, 2295.366666666667], [1.74154836E12, 2294.483333333333], [1.74154854E12, 2295.366666666667], [1.74154806E12, 2299.4333333333334], [1.741548E12, 1944.55], [1.74154818E12, 2366.516666666667], [1.74154848E12, 2297.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7415486E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 260.0179640718562, "minX": 1.741548E12, "maxY": 2004.5527950310563, "series": [{"data": [[1.74154812E12, 471.44720496894405], [1.7415483E12, 260.0179640718562], [1.7415486E12, 260.68], [1.74154824E12, 406.00598802395194], [1.74154842E12, 260.7590361445784], [1.74154836E12, 260.3413173652695], [1.74154854E12, 260.13855421686736], [1.74154806E12, 280.52694610778445], [1.741548E12, 265.4113475177305], [1.74154818E12, 401.1279069767441], [1.74154848E12, 264.4491017964071]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[1.74154812E12, 2004.5527950310563], [1.7415483E12, 1036.8862275449105], [1.7415486E12, 1040.6250000000005], [1.74154824E12, 1745.4464285714287], [1.74154842E12, 1036.8502994011976], [1.74154836E12, 1042.433734939759], [1.74154854E12, 1047.25748502994], [1.74154806E12, 1378.2155688622747], [1.741548E12, 1063.7323943661966], [1.74154818E12, 1935.0760233918131], [1.74154848E12, 1043.138554216868]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.74154812E12, 488.00000000000006], [1.7415483E12, 261.855421686747], [1.7415486E12, 265.04], [1.74154824E12, 398.98809523809535], [1.74154842E12, 261.46706586826343], [1.74154836E12, 261.5783132530119], [1.74154854E12, 263.814371257485], [1.74154806E12, 333.0898203592814], [1.741548E12, 267.92857142857156], [1.74154818E12, 412.90116279069787], [1.74154848E12, 263.10778443113765]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7415486E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 260.00598802395194, "minX": 1.741548E12, "maxY": 2004.5217391304345, "series": [{"data": [[1.74154812E12, 471.4285714285712], [1.7415483E12, 260.00598802395194], [1.7415486E12, 260.68], [1.74154824E12, 405.99401197604794], [1.74154842E12, 260.7469879518072], [1.74154836E12, 260.3353293413175], [1.74154854E12, 260.13855421686736], [1.74154806E12, 280.50898203592794], [1.741548E12, 265.39007092198597], [1.74154818E12, 401.1279069767441], [1.74154848E12, 264.437125748503]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[1.74154812E12, 2004.5217391304345], [1.7415483E12, 1036.8862275449105], [1.7415486E12, 1040.6250000000005], [1.74154824E12, 1745.4345238095236], [1.74154842E12, 1036.8502994011976], [1.74154836E12, 1042.4277108433746], [1.74154854E12, 1047.2455089820362], [1.74154806E12, 1378.2095808383237], [1.741548E12, 1063.6690140845074], [1.74154818E12, 1935.0701754385957], [1.74154848E12, 1043.1325301204827]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.74154812E12, 487.9937888198759], [1.7415483E12, 261.8433734939758], [1.7415486E12, 265.04], [1.74154824E12, 398.98214285714283], [1.74154842E12, 261.4610778443113], [1.74154836E12, 261.5662650602409], [1.74154854E12, 263.814371257485], [1.74154806E12, 333.0838323353294], [1.741548E12, 267.8857142857144], [1.74154818E12, 412.8895348837211], [1.74154848E12, 263.10179640718565]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7415486E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.741548E12, "maxY": 1534.1677018633543, "series": [{"data": [[1.74154812E12, 0.0], [1.7415483E12, 0.0], [1.7415486E12, 0.0], [1.74154824E12, 0.0], [1.74154842E12, 0.0], [1.74154836E12, 0.0], [1.74154854E12, 0.0], [1.74154806E12, 0.0], [1.741548E12, 0.0], [1.74154818E12, 0.0], [1.74154848E12, 0.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[1.74154812E12, 1534.1677018633543], [1.7415483E12, 776.9820359281432], [1.7415486E12, 779.7083333333335], [1.74154824E12, 1331.2619047619048], [1.74154842E12, 776.4550898203594], [1.74154836E12, 782.4337349397592], [1.74154854E12, 785.4610778443108], [1.74154806E12, 846.1616766467065], [1.741548E12, 799.4225352112677], [1.74154818E12, 1523.2748538011685], [1.74154848E12, 781.2710843373488]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.74154812E12, 0.0], [1.7415483E12, 0.0], [1.7415486E12, 0.0], [1.74154824E12, 0.0], [1.74154842E12, 0.0], [1.74154836E12, 0.0], [1.74154854E12, 0.0], [1.74154806E12, 0.0], [1.741548E12, 0.0], [1.74154818E12, 0.0], [1.74154848E12, 0.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7415486E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 238.0, "minX": 1.741548E12, "maxY": 8006.0, "series": [{"data": [[1.74154812E12, 5669.0], [1.7415483E12, 1164.0], [1.7415486E12, 1107.0], [1.74154824E12, 5075.0], [1.74154842E12, 1143.0], [1.74154836E12, 1984.0], [1.74154854E12, 2028.0], [1.74154806E12, 8006.0], [1.741548E12, 1476.0], [1.74154818E12, 7151.0], [1.74154848E12, 1477.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74154812E12, 2271.800000000001], [1.7415483E12, 1066.0], [1.7415486E12, 1075.0], [1.74154824E12, 1999.8000000000006], [1.74154842E12, 1065.8000000000002], [1.74154836E12, 1068.0], [1.74154854E12, 1067.9], [1.74154806E12, 1164.7], [1.741548E12, 1077.0], [1.74154818E12, 1942.0000000000002], [1.74154848E12, 1063.8000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74154812E12, 4042.559999999995], [1.7415483E12, 1114.0], [1.7415486E12, 1107.0], [1.74154824E12, 3778.559999999995], [1.74154842E12, 1110.0], [1.74154836E12, 1113.0], [1.74154854E12, 1119.95], [1.74154806E12, 5023.3900000000085], [1.741548E12, 1349.7199999999998], [1.74154818E12, 5661.279999999994], [1.74154848E12, 1148.7700000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74154812E12, 2789.999999999998], [1.7415483E12, 1085.95], [1.7415486E12, 1092.25], [1.74154824E12, 2368.199999999999], [1.74154842E12, 1085.85], [1.74154836E12, 1084.0], [1.74154854E12, 1087.95], [1.74154806E12, 1535.3499999999992], [1.741548E12, 1103.0], [1.74154818E12, 2338.799999999999], [1.74154848E12, 1087.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74154812E12, 245.0], [1.7415483E12, 239.0], [1.7415486E12, 242.0], [1.74154824E12, 241.0], [1.74154842E12, 241.0], [1.74154836E12, 238.0], [1.74154854E12, 241.0], [1.74154806E12, 241.0], [1.741548E12, 240.0], [1.74154818E12, 249.0], [1.74154848E12, 241.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74154812E12, 554.0], [1.7415483E12, 269.0], [1.7415486E12, 272.0], [1.74154824E12, 496.0], [1.74154842E12, 269.0], [1.74154836E12, 270.0], [1.74154854E12, 270.0], [1.74154806E12, 277.0], [1.741548E12, 272.0], [1.74154818E12, 463.0], [1.74154848E12, 270.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7415486E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 272.0, "minX": 2.0, "maxY": 8260.0, "series": [{"data": [[8.0, 272.0], [33.0, 421.0], [2.0, 1095.5], [9.0, 274.0], [10.0, 406.0], [11.0, 444.5], [3.0, 1395.0], [12.0, 403.5], [13.0, 518.0], [14.0, 538.5], [15.0, 333.0], [4.0, 627.5], [16.0, 489.0], [17.0, 336.0], [18.0, 546.5], [5.0, 683.0], [20.0, 498.0], [22.0, 320.0], [6.0, 544.0], [7.0, 288.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 8260.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 272.0, "minX": 2.0, "maxY": 8260.0, "series": [{"data": [[8.0, 272.0], [33.0, 421.0], [2.0, 1095.5], [9.0, 274.0], [10.0, 406.0], [11.0, 444.5], [3.0, 1393.0], [12.0, 403.5], [13.0, 518.0], [14.0, 538.5], [15.0, 333.0], [4.0, 627.5], [16.0, 489.0], [17.0, 336.0], [18.0, 546.5], [5.0, 683.0], [20.0, 498.0], [22.0, 320.0], [6.0, 544.0], [7.0, 288.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 8260.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.741548E12, "maxY": 8.5, "series": [{"data": [[1.74154812E12, 8.133333333333333], [1.7415483E12, 8.333333333333334], [1.7415486E12, 1.1666666666666667], [1.74154824E12, 8.366666666666667], [1.74154842E12, 8.333333333333334], [1.74154836E12, 8.333333333333334], [1.74154854E12, 8.333333333333334], [1.74154806E12, 8.35], [1.741548E12, 7.133333333333334], [1.74154818E12, 8.5], [1.74154848E12, 8.316666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7415486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.741548E12, "maxY": 8.583333333333334, "series": [{"data": [[1.74154812E12, 8.05], [1.7415483E12, 8.333333333333334], [1.7415486E12, 1.2333333333333334], [1.74154824E12, 8.383333333333333], [1.74154842E12, 8.333333333333334], [1.74154836E12, 8.316666666666666], [1.74154854E12, 8.333333333333334], [1.74154806E12, 8.333333333333334], [1.741548E12, 7.05], [1.74154818E12, 8.583333333333334], [1.74154848E12, 8.333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74154806E12, 0.016666666666666666]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7415486E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.741548E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.74154806E12, 0.016666666666666666]], "isOverall": false, "label": "Search Booking-failure", "isController": false}, {"data": [[1.74154812E12, 2.683333333333333], [1.7415483E12, 2.783333333333333], [1.7415486E12, 0.4166666666666667], [1.74154824E12, 2.783333333333333], [1.74154842E12, 2.7666666666666666], [1.74154836E12, 2.783333333333333], [1.74154854E12, 2.7666666666666666], [1.74154806E12, 2.783333333333333], [1.741548E12, 2.35], [1.74154818E12, 2.8666666666666667], [1.74154848E12, 2.783333333333333]], "isOverall": false, "label": "Booking-success", "isController": false}, {"data": [[1.74154812E12, 2.683333333333333], [1.7415483E12, 2.783333333333333], [1.7415486E12, 0.4], [1.74154824E12, 2.8], [1.74154842E12, 2.783333333333333], [1.74154836E12, 2.7666666666666666], [1.74154854E12, 2.783333333333333], [1.74154806E12, 2.783333333333333], [1.741548E12, 2.3666666666666667], [1.74154818E12, 2.85], [1.74154848E12, 2.7666666666666666]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.74154812E12, 2.683333333333333], [1.7415483E12, 2.7666666666666666], [1.7415486E12, 0.4166666666666667], [1.74154824E12, 2.8], [1.74154842E12, 2.783333333333333], [1.74154836E12, 2.7666666666666666], [1.74154854E12, 2.783333333333333], [1.74154806E12, 2.7666666666666666], [1.741548E12, 2.3333333333333335], [1.74154818E12, 2.8666666666666667], [1.74154848E12, 2.783333333333333]], "isOverall": false, "label": "Search Booking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7415486E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.741548E12, "maxY": 8.583333333333334, "series": [{"data": [[1.74154812E12, 8.05], [1.7415483E12, 8.333333333333334], [1.7415486E12, 1.2333333333333334], [1.74154824E12, 8.383333333333333], [1.74154842E12, 8.333333333333334], [1.74154836E12, 8.316666666666666], [1.74154854E12, 8.333333333333334], [1.74154806E12, 8.333333333333334], [1.741548E12, 7.05], [1.74154818E12, 8.583333333333334], [1.74154848E12, 8.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74154806E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7415486E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

