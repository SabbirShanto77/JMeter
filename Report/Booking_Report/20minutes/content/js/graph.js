/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 236.0, "minX": 0.0, "maxY": 8086.0, "series": [{"data": [[0.0, 239.0], [0.1, 239.0], [0.2, 240.0], [0.3, 240.0], [0.4, 241.0], [0.5, 241.0], [0.6, 242.0], [0.7, 242.0], [0.8, 242.0], [0.9, 242.0], [1.0, 243.0], [1.1, 243.0], [1.2, 243.0], [1.3, 243.0], [1.4, 243.0], [1.5, 243.0], [1.6, 243.0], [1.7, 243.0], [1.8, 243.0], [1.9, 243.0], [2.0, 243.0], [2.1, 244.0], [2.2, 244.0], [2.3, 244.0], [2.4, 244.0], [2.5, 244.0], [2.6, 244.0], [2.7, 244.0], [2.8, 244.0], [2.9, 244.0], [3.0, 244.0], [3.1, 244.0], [3.2, 244.0], [3.3, 244.0], [3.4, 244.0], [3.5, 244.0], [3.6, 245.0], [3.7, 245.0], [3.8, 245.0], [3.9, 245.0], [4.0, 245.0], [4.1, 245.0], [4.2, 245.0], [4.3, 245.0], [4.4, 245.0], [4.5, 245.0], [4.6, 245.0], [4.7, 245.0], [4.8, 245.0], [4.9, 245.0], [5.0, 246.0], [5.1, 246.0], [5.2, 246.0], [5.3, 246.0], [5.4, 246.0], [5.5, 246.0], [5.6, 246.0], [5.7, 246.0], [5.8, 246.0], [5.9, 246.0], [6.0, 246.0], [6.1, 246.0], [6.2, 246.0], [6.3, 246.0], [6.4, 246.0], [6.5, 246.0], [6.6, 246.0], [6.7, 246.0], [6.8, 246.0], [6.9, 247.0], [7.0, 247.0], [7.1, 247.0], [7.2, 247.0], [7.3, 247.0], [7.4, 247.0], [7.5, 247.0], [7.6, 247.0], [7.7, 247.0], [7.8, 247.0], [7.9, 247.0], [8.0, 247.0], [8.1, 247.0], [8.2, 247.0], [8.3, 247.0], [8.4, 247.0], [8.5, 247.0], [8.6, 247.0], [8.7, 247.0], [8.8, 247.0], [8.9, 247.0], [9.0, 247.0], [9.1, 247.0], [9.2, 247.0], [9.3, 247.0], [9.4, 247.0], [9.5, 247.0], [9.6, 248.0], [9.7, 248.0], [9.8, 248.0], [9.9, 248.0], [10.0, 248.0], [10.1, 248.0], [10.2, 248.0], [10.3, 248.0], [10.4, 248.0], [10.5, 248.0], [10.6, 248.0], [10.7, 248.0], [10.8, 248.0], [10.9, 248.0], [11.0, 248.0], [11.1, 248.0], [11.2, 248.0], [11.3, 248.0], [11.4, 248.0], [11.5, 248.0], [11.6, 248.0], [11.7, 248.0], [11.8, 248.0], [11.9, 248.0], [12.0, 248.0], [12.1, 248.0], [12.2, 248.0], [12.3, 248.0], [12.4, 249.0], [12.5, 249.0], [12.6, 249.0], [12.7, 249.0], [12.8, 249.0], [12.9, 249.0], [13.0, 249.0], [13.1, 249.0], [13.2, 249.0], [13.3, 249.0], [13.4, 249.0], [13.5, 249.0], [13.6, 249.0], [13.7, 249.0], [13.8, 249.0], [13.9, 249.0], [14.0, 249.0], [14.1, 249.0], [14.2, 249.0], [14.3, 249.0], [14.4, 249.0], [14.5, 249.0], [14.6, 249.0], [14.7, 249.0], [14.8, 249.0], [14.9, 249.0], [15.0, 249.0], [15.1, 249.0], [15.2, 249.0], [15.3, 249.0], [15.4, 249.0], [15.5, 249.0], [15.6, 250.0], [15.7, 250.0], [15.8, 250.0], [15.9, 250.0], [16.0, 250.0], [16.1, 250.0], [16.2, 250.0], [16.3, 250.0], [16.4, 250.0], [16.5, 250.0], [16.6, 250.0], [16.7, 250.0], [16.8, 250.0], [16.9, 250.0], [17.0, 250.0], [17.1, 250.0], [17.2, 250.0], [17.3, 250.0], [17.4, 250.0], [17.5, 250.0], [17.6, 250.0], [17.7, 250.0], [17.8, 250.0], [17.9, 250.0], [18.0, 250.0], [18.1, 250.0], [18.2, 250.0], [18.3, 250.0], [18.4, 250.0], [18.5, 250.0], [18.6, 250.0], [18.7, 250.0], [18.8, 250.0], [18.9, 250.0], [19.0, 251.0], [19.1, 251.0], [19.2, 251.0], [19.3, 251.0], [19.4, 251.0], [19.5, 251.0], [19.6, 251.0], [19.7, 251.0], [19.8, 251.0], [19.9, 251.0], [20.0, 251.0], [20.1, 251.0], [20.2, 251.0], [20.3, 251.0], [20.4, 251.0], [20.5, 251.0], [20.6, 251.0], [20.7, 251.0], [20.8, 251.0], [20.9, 251.0], [21.0, 251.0], [21.1, 251.0], [21.2, 251.0], [21.3, 251.0], [21.4, 251.0], [21.5, 251.0], [21.6, 251.0], [21.7, 251.0], [21.8, 251.0], [21.9, 251.0], [22.0, 251.0], [22.1, 251.0], [22.2, 251.0], [22.3, 251.0], [22.4, 251.0], [22.5, 251.0], [22.6, 251.0], [22.7, 251.0], [22.8, 251.0], [22.9, 251.0], [23.0, 251.0], [23.1, 251.0], [23.2, 251.0], [23.3, 252.0], [23.4, 252.0], [23.5, 252.0], [23.6, 252.0], [23.7, 252.0], [23.8, 252.0], [23.9, 252.0], [24.0, 252.0], [24.1, 252.0], [24.2, 252.0], [24.3, 252.0], [24.4, 252.0], [24.5, 252.0], [24.6, 252.0], [24.7, 252.0], [24.8, 252.0], [24.9, 252.0], [25.0, 252.0], [25.1, 252.0], [25.2, 252.0], [25.3, 252.0], [25.4, 252.0], [25.5, 252.0], [25.6, 252.0], [25.7, 252.0], [25.8, 252.0], [25.9, 252.0], [26.0, 252.0], [26.1, 252.0], [26.2, 252.0], [26.3, 252.0], [26.4, 252.0], [26.5, 252.0], [26.6, 253.0], [26.7, 253.0], [26.8, 253.0], [26.9, 253.0], [27.0, 253.0], [27.1, 253.0], [27.2, 253.0], [27.3, 253.0], [27.4, 253.0], [27.5, 253.0], [27.6, 253.0], [27.7, 253.0], [27.8, 253.0], [27.9, 253.0], [28.0, 253.0], [28.1, 253.0], [28.2, 253.0], [28.3, 253.0], [28.4, 253.0], [28.5, 253.0], [28.6, 253.0], [28.7, 253.0], [28.8, 253.0], [28.9, 253.0], [29.0, 253.0], [29.1, 253.0], [29.2, 253.0], [29.3, 253.0], [29.4, 253.0], [29.5, 253.0], [29.6, 253.0], [29.7, 253.0], [29.8, 253.0], [29.9, 253.0], [30.0, 253.0], [30.1, 254.0], [30.2, 254.0], [30.3, 254.0], [30.4, 254.0], [30.5, 254.0], [30.6, 254.0], [30.7, 254.0], [30.8, 254.0], [30.9, 254.0], [31.0, 254.0], [31.1, 254.0], [31.2, 254.0], [31.3, 254.0], [31.4, 254.0], [31.5, 254.0], [31.6, 254.0], [31.7, 254.0], [31.8, 254.0], [31.9, 254.0], [32.0, 254.0], [32.1, 254.0], [32.2, 254.0], [32.3, 254.0], [32.4, 254.0], [32.5, 254.0], [32.6, 254.0], [32.7, 254.0], [32.8, 254.0], [32.9, 254.0], [33.0, 254.0], [33.1, 254.0], [33.2, 254.0], [33.3, 254.0], [33.4, 254.0], [33.5, 254.0], [33.6, 255.0], [33.7, 255.0], [33.8, 255.0], [33.9, 255.0], [34.0, 255.0], [34.1, 255.0], [34.2, 255.0], [34.3, 255.0], [34.4, 255.0], [34.5, 255.0], [34.6, 255.0], [34.7, 255.0], [34.8, 255.0], [34.9, 255.0], [35.0, 255.0], [35.1, 255.0], [35.2, 255.0], [35.3, 255.0], [35.4, 255.0], [35.5, 255.0], [35.6, 255.0], [35.7, 255.0], [35.8, 255.0], [35.9, 255.0], [36.0, 255.0], [36.1, 255.0], [36.2, 255.0], [36.3, 255.0], [36.4, 255.0], [36.5, 255.0], [36.6, 255.0], [36.7, 255.0], [36.8, 255.0], [36.9, 255.0], [37.0, 256.0], [37.1, 256.0], [37.2, 256.0], [37.3, 256.0], [37.4, 256.0], [37.5, 256.0], [37.6, 256.0], [37.7, 256.0], [37.8, 256.0], [37.9, 256.0], [38.0, 256.0], [38.1, 256.0], [38.2, 256.0], [38.3, 256.0], [38.4, 256.0], [38.5, 256.0], [38.6, 256.0], [38.7, 256.0], [38.8, 256.0], [38.9, 256.0], [39.0, 256.0], [39.1, 256.0], [39.2, 256.0], [39.3, 256.0], [39.4, 257.0], [39.5, 257.0], [39.6, 257.0], [39.7, 257.0], [39.8, 257.0], [39.9, 257.0], [40.0, 257.0], [40.1, 257.0], [40.2, 257.0], [40.3, 257.0], [40.4, 257.0], [40.5, 257.0], [40.6, 257.0], [40.7, 257.0], [40.8, 257.0], [40.9, 257.0], [41.0, 257.0], [41.1, 257.0], [41.2, 257.0], [41.3, 257.0], [41.4, 257.0], [41.5, 257.0], [41.6, 257.0], [41.7, 257.0], [41.8, 257.0], [41.9, 258.0], [42.0, 258.0], [42.1, 258.0], [42.2, 258.0], [42.3, 258.0], [42.4, 258.0], [42.5, 258.0], [42.6, 258.0], [42.7, 258.0], [42.8, 258.0], [42.9, 258.0], [43.0, 258.0], [43.1, 258.0], [43.2, 258.0], [43.3, 258.0], [43.4, 258.0], [43.5, 258.0], [43.6, 258.0], [43.7, 258.0], [43.8, 258.0], [43.9, 259.0], [44.0, 259.0], [44.1, 259.0], [44.2, 259.0], [44.3, 259.0], [44.4, 259.0], [44.5, 259.0], [44.6, 259.0], [44.7, 259.0], [44.8, 259.0], [44.9, 259.0], [45.0, 259.0], [45.1, 259.0], [45.2, 259.0], [45.3, 259.0], [45.4, 259.0], [45.5, 260.0], [45.6, 260.0], [45.7, 260.0], [45.8, 260.0], [45.9, 260.0], [46.0, 260.0], [46.1, 260.0], [46.2, 260.0], [46.3, 260.0], [46.4, 260.0], [46.5, 260.0], [46.6, 260.0], [46.7, 260.0], [46.8, 260.0], [46.9, 260.0], [47.0, 260.0], [47.1, 260.0], [47.2, 261.0], [47.3, 261.0], [47.4, 261.0], [47.5, 261.0], [47.6, 261.0], [47.7, 261.0], [47.8, 261.0], [47.9, 261.0], [48.0, 261.0], [48.1, 261.0], [48.2, 261.0], [48.3, 261.0], [48.4, 261.0], [48.5, 261.0], [48.6, 261.0], [48.7, 261.0], [48.8, 261.0], [48.9, 261.0], [49.0, 261.0], [49.1, 261.0], [49.2, 261.0], [49.3, 261.0], [49.4, 261.0], [49.5, 261.0], [49.6, 261.0], [49.7, 261.0], [49.8, 261.0], [49.9, 261.0], [50.0, 262.0], [50.1, 262.0], [50.2, 262.0], [50.3, 262.0], [50.4, 262.0], [50.5, 262.0], [50.6, 262.0], [50.7, 262.0], [50.8, 262.0], [50.9, 262.0], [51.0, 262.0], [51.1, 262.0], [51.2, 262.0], [51.3, 262.0], [51.4, 262.0], [51.5, 262.0], [51.6, 262.0], [51.7, 262.0], [51.8, 262.0], [51.9, 262.0], [52.0, 262.0], [52.1, 263.0], [52.2, 263.0], [52.3, 263.0], [52.4, 263.0], [52.5, 263.0], [52.6, 263.0], [52.7, 263.0], [52.8, 263.0], [52.9, 263.0], [53.0, 263.0], [53.1, 263.0], [53.2, 263.0], [53.3, 263.0], [53.4, 263.0], [53.5, 263.0], [53.6, 263.0], [53.7, 263.0], [53.8, 263.0], [53.9, 263.0], [54.0, 263.0], [54.1, 263.0], [54.2, 263.0], [54.3, 263.0], [54.4, 264.0], [54.5, 264.0], [54.6, 264.0], [54.7, 264.0], [54.8, 264.0], [54.9, 264.0], [55.0, 264.0], [55.1, 264.0], [55.2, 264.0], [55.3, 264.0], [55.4, 264.0], [55.5, 264.0], [55.6, 264.0], [55.7, 264.0], [55.8, 264.0], [55.9, 264.0], [56.0, 264.0], [56.1, 264.0], [56.2, 264.0], [56.3, 264.0], [56.4, 264.0], [56.5, 264.0], [56.6, 264.0], [56.7, 265.0], [56.8, 265.0], [56.9, 265.0], [57.0, 265.0], [57.1, 265.0], [57.2, 265.0], [57.3, 265.0], [57.4, 265.0], [57.5, 265.0], [57.6, 265.0], [57.7, 265.0], [57.8, 265.0], [57.9, 265.0], [58.0, 265.0], [58.1, 265.0], [58.2, 265.0], [58.3, 265.0], [58.4, 265.0], [58.5, 265.0], [58.6, 265.0], [58.7, 265.0], [58.8, 266.0], [58.9, 266.0], [59.0, 266.0], [59.1, 266.0], [59.2, 266.0], [59.3, 266.0], [59.4, 266.0], [59.5, 266.0], [59.6, 266.0], [59.7, 266.0], [59.8, 266.0], [59.9, 266.0], [60.0, 266.0], [60.1, 266.0], [60.2, 266.0], [60.3, 266.0], [60.4, 266.0], [60.5, 266.0], [60.6, 266.0], [60.7, 266.0], [60.8, 266.0], [60.9, 266.0], [61.0, 266.0], [61.1, 266.0], [61.2, 266.0], [61.3, 266.0], [61.4, 266.0], [61.5, 267.0], [61.6, 267.0], [61.7, 267.0], [61.8, 267.0], [61.9, 267.0], [62.0, 267.0], [62.1, 267.0], [62.2, 267.0], [62.3, 267.0], [62.4, 267.0], [62.5, 267.0], [62.6, 267.0], [62.7, 267.0], [62.8, 267.0], [62.9, 267.0], [63.0, 267.0], [63.1, 267.0], [63.2, 267.0], [63.3, 267.0], [63.4, 267.0], [63.5, 267.0], [63.6, 267.0], [63.7, 267.0], [63.8, 267.0], [63.9, 267.0], [64.0, 268.0], [64.1, 268.0], [64.2, 268.0], [64.3, 268.0], [64.4, 268.0], [64.5, 268.0], [64.6, 268.0], [64.7, 268.0], [64.8, 268.0], [64.9, 268.0], [65.0, 268.0], [65.1, 268.0], [65.2, 268.0], [65.3, 268.0], [65.4, 268.0], [65.5, 268.0], [65.6, 268.0], [65.7, 268.0], [65.8, 268.0], [65.9, 268.0], [66.0, 268.0], [66.1, 268.0], [66.2, 269.0], [66.3, 269.0], [66.4, 269.0], [66.5, 269.0], [66.6, 269.0], [66.7, 269.0], [66.8, 269.0], [66.9, 269.0], [67.0, 269.0], [67.1, 269.0], [67.2, 269.0], [67.3, 269.0], [67.4, 269.0], [67.5, 269.0], [67.6, 269.0], [67.7, 269.0], [67.8, 269.0], [67.9, 269.0], [68.0, 269.0], [68.1, 269.0], [68.2, 269.0], [68.3, 269.0], [68.4, 269.0], [68.5, 270.0], [68.6, 270.0], [68.7, 270.0], [68.8, 270.0], [68.9, 270.0], [69.0, 270.0], [69.1, 270.0], [69.2, 270.0], [69.3, 270.0], [69.4, 270.0], [69.5, 270.0], [69.6, 270.0], [69.7, 270.0], [69.8, 270.0], [69.9, 270.0], [70.0, 270.0], [70.1, 270.0], [70.2, 270.0], [70.3, 270.0], [70.4, 270.0], [70.5, 270.0], [70.6, 270.0], [70.7, 270.0], [70.8, 270.0], [70.9, 270.0], [71.0, 270.0], [71.1, 270.0], [71.2, 270.0], [71.3, 270.0], [71.4, 271.0], [71.5, 271.0], [71.6, 271.0], [71.7, 271.0], [71.8, 271.0], [71.9, 271.0], [72.0, 271.0], [72.1, 271.0], [72.2, 271.0], [72.3, 271.0], [72.4, 271.0], [72.5, 271.0], [72.6, 271.0], [72.7, 271.0], [72.8, 271.0], [72.9, 271.0], [73.0, 271.0], [73.1, 271.0], [73.2, 271.0], [73.3, 271.0], [73.4, 271.0], [73.5, 271.0], [73.6, 272.0], [73.7, 272.0], [73.8, 272.0], [73.9, 272.0], [74.0, 272.0], [74.1, 272.0], [74.2, 272.0], [74.3, 272.0], [74.4, 272.0], [74.5, 272.0], [74.6, 272.0], [74.7, 272.0], [74.8, 272.0], [74.9, 272.0], [75.0, 272.0], [75.1, 272.0], [75.2, 272.0], [75.3, 272.0], [75.4, 272.0], [75.5, 272.0], [75.6, 272.0], [75.7, 272.0], [75.8, 272.0], [75.9, 272.0], [76.0, 272.0], [76.1, 272.0], [76.2, 272.0], [76.3, 272.0], [76.4, 273.0], [76.5, 273.0], [76.6, 273.0], [76.7, 273.0], [76.8, 273.0], [76.9, 273.0], [77.0, 273.0], [77.1, 273.0], [77.2, 273.0], [77.3, 273.0], [77.4, 273.0], [77.5, 273.0], [77.6, 273.0], [77.7, 273.0], [77.8, 273.0], [77.9, 273.0], [78.0, 273.0], [78.1, 273.0], [78.2, 273.0], [78.3, 273.0], [78.4, 273.0], [78.5, 273.0], [78.6, 273.0], [78.7, 273.0], [78.8, 273.0], [78.9, 273.0], [79.0, 273.0], [79.1, 274.0], [79.2, 274.0], [79.3, 274.0], [79.4, 274.0], [79.5, 274.0], [79.6, 274.0], [79.7, 274.0], [79.8, 274.0], [79.9, 274.0], [80.0, 274.0], [80.1, 274.0], [80.2, 274.0], [80.3, 274.0], [80.4, 274.0], [80.5, 274.0], [80.6, 274.0], [80.7, 274.0], [80.8, 274.0], [80.9, 274.0], [81.0, 275.0], [81.1, 275.0], [81.2, 275.0], [81.3, 275.0], [81.4, 275.0], [81.5, 275.0], [81.6, 275.0], [81.7, 275.0], [81.8, 275.0], [81.9, 275.0], [82.0, 275.0], [82.1, 275.0], [82.2, 275.0], [82.3, 275.0], [82.4, 276.0], [82.5, 276.0], [82.6, 276.0], [82.7, 276.0], [82.8, 276.0], [82.9, 276.0], [83.0, 276.0], [83.1, 276.0], [83.2, 276.0], [83.3, 276.0], [83.4, 276.0], [83.5, 277.0], [83.6, 277.0], [83.7, 277.0], [83.8, 277.0], [83.9, 277.0], [84.0, 277.0], [84.1, 277.0], [84.2, 277.0], [84.3, 277.0], [84.4, 277.0], [84.5, 277.0], [84.6, 277.0], [84.7, 278.0], [84.8, 278.0], [84.9, 278.0], [85.0, 278.0], [85.1, 278.0], [85.2, 278.0], [85.3, 278.0], [85.4, 278.0], [85.5, 279.0], [85.6, 279.0], [85.7, 279.0], [85.8, 279.0], [85.9, 279.0], [86.0, 280.0], [86.1, 280.0], [86.2, 280.0], [86.3, 280.0], [86.4, 280.0], [86.5, 280.0], [86.6, 280.0], [86.7, 280.0], [86.8, 280.0], [86.9, 280.0], [87.0, 281.0], [87.1, 281.0], [87.2, 281.0], [87.3, 281.0], [87.4, 281.0], [87.5, 281.0], [87.6, 281.0], [87.7, 282.0], [87.8, 282.0], [87.9, 282.0], [88.0, 282.0], [88.1, 282.0], [88.2, 282.0], [88.3, 283.0], [88.4, 283.0], [88.5, 283.0], [88.6, 283.0], [88.7, 283.0], [88.8, 283.0], [88.9, 284.0], [89.0, 284.0], [89.1, 284.0], [89.2, 284.0], [89.3, 284.0], [89.4, 284.0], [89.5, 285.0], [89.6, 285.0], [89.7, 285.0], [89.8, 285.0], [89.9, 285.0], [90.0, 285.0], [90.1, 285.0], [90.2, 285.0], [90.3, 285.0], [90.4, 285.0], [90.5, 286.0], [90.6, 286.0], [90.7, 286.0], [90.8, 286.0], [90.9, 286.0], [91.0, 287.0], [91.1, 287.0], [91.2, 287.0], [91.3, 287.0], [91.4, 287.0], [91.5, 287.0], [91.6, 288.0], [91.7, 288.0], [91.8, 288.0], [91.9, 288.0], [92.0, 288.0], [92.1, 288.0], [92.2, 289.0], [92.3, 289.0], [92.4, 289.0], [92.5, 289.0], [92.6, 289.0], [92.7, 289.0], [92.8, 290.0], [92.9, 290.0], [93.0, 290.0], [93.1, 290.0], [93.2, 290.0], [93.3, 290.0], [93.4, 291.0], [93.5, 291.0], [93.6, 291.0], [93.7, 291.0], [93.8, 291.0], [93.9, 292.0], [94.0, 292.0], [94.1, 292.0], [94.2, 292.0], [94.3, 293.0], [94.4, 293.0], [94.5, 293.0], [94.6, 294.0], [94.7, 294.0], [94.8, 294.0], [94.9, 294.0], [95.0, 294.0], [95.1, 295.0], [95.2, 295.0], [95.3, 295.0], [95.4, 296.0], [95.5, 296.0], [95.6, 296.0], [95.7, 297.0], [95.8, 297.0], [95.9, 298.0], [96.0, 298.0], [96.1, 298.0], [96.2, 299.0], [96.3, 299.0], [96.4, 300.0], [96.5, 301.0], [96.6, 302.0], [96.7, 302.0], [96.8, 304.0], [96.9, 306.0], [97.0, 306.0], [97.1, 307.0], [97.2, 308.0], [97.3, 310.0], [97.4, 313.0], [97.5, 314.0], [97.6, 317.0], [97.7, 322.0], [97.8, 325.0], [97.9, 327.0], [98.0, 331.0], [98.1, 332.0], [98.2, 338.0], [98.3, 346.0], [98.4, 352.0], [98.5, 356.0], [98.6, 365.0], [98.7, 370.0], [98.8, 379.0], [98.9, 387.0], [99.0, 417.0], [99.1, 434.0], [99.2, 458.0], [99.3, 480.0], [99.4, 665.0], [99.5, 873.0], [99.6, 958.0], [99.7, 2257.0], [99.8, 3259.0], [99.9, 4257.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[0.0, 952.0], [0.1, 959.0], [0.2, 959.0], [0.3, 962.0], [0.4, 963.0], [0.5, 963.0], [0.6, 965.0], [0.7, 966.0], [0.8, 967.0], [0.9, 968.0], [1.0, 970.0], [1.1, 971.0], [1.2, 972.0], [1.3, 972.0], [1.4, 973.0], [1.5, 973.0], [1.6, 974.0], [1.7, 974.0], [1.8, 974.0], [1.9, 975.0], [2.0, 975.0], [2.1, 975.0], [2.2, 975.0], [2.3, 976.0], [2.4, 976.0], [2.5, 976.0], [2.6, 976.0], [2.7, 976.0], [2.8, 977.0], [2.9, 977.0], [3.0, 977.0], [3.1, 977.0], [3.2, 978.0], [3.3, 978.0], [3.4, 978.0], [3.5, 979.0], [3.6, 979.0], [3.7, 979.0], [3.8, 980.0], [3.9, 980.0], [4.0, 980.0], [4.1, 980.0], [4.2, 981.0], [4.3, 981.0], [4.4, 981.0], [4.5, 982.0], [4.6, 982.0], [4.7, 982.0], [4.8, 982.0], [4.9, 982.0], [5.0, 982.0], [5.1, 983.0], [5.2, 983.0], [5.3, 984.0], [5.4, 984.0], [5.5, 984.0], [5.6, 985.0], [5.7, 985.0], [5.8, 985.0], [5.9, 985.0], [6.0, 985.0], [6.1, 985.0], [6.2, 986.0], [6.3, 986.0], [6.4, 986.0], [6.5, 986.0], [6.6, 987.0], [6.7, 987.0], [6.8, 987.0], [6.9, 987.0], [7.0, 988.0], [7.1, 988.0], [7.2, 988.0], [7.3, 988.0], [7.4, 988.0], [7.5, 989.0], [7.6, 989.0], [7.7, 989.0], [7.8, 989.0], [7.9, 989.0], [8.0, 989.0], [8.1, 990.0], [8.2, 990.0], [8.3, 990.0], [8.4, 990.0], [8.5, 990.0], [8.6, 990.0], [8.7, 990.0], [8.8, 990.0], [8.9, 990.0], [9.0, 991.0], [9.1, 991.0], [9.2, 991.0], [9.3, 991.0], [9.4, 991.0], [9.5, 991.0], [9.6, 991.0], [9.7, 991.0], [9.8, 991.0], [9.9, 992.0], [10.0, 992.0], [10.1, 992.0], [10.2, 992.0], [10.3, 992.0], [10.4, 992.0], [10.5, 992.0], [10.6, 992.0], [10.7, 993.0], [10.8, 993.0], [10.9, 993.0], [11.0, 993.0], [11.1, 993.0], [11.2, 993.0], [11.3, 993.0], [11.4, 993.0], [11.5, 994.0], [11.6, 994.0], [11.7, 994.0], [11.8, 994.0], [11.9, 994.0], [12.0, 994.0], [12.1, 995.0], [12.2, 995.0], [12.3, 995.0], [12.4, 995.0], [12.5, 995.0], [12.6, 995.0], [12.7, 995.0], [12.8, 995.0], [12.9, 996.0], [13.0, 996.0], [13.1, 996.0], [13.2, 996.0], [13.3, 996.0], [13.4, 996.0], [13.5, 997.0], [13.6, 997.0], [13.7, 997.0], [13.8, 997.0], [13.9, 997.0], [14.0, 997.0], [14.1, 997.0], [14.2, 998.0], [14.3, 998.0], [14.4, 998.0], [14.5, 998.0], [14.6, 998.0], [14.7, 998.0], [14.8, 998.0], [14.9, 998.0], [15.0, 998.0], [15.1, 998.0], [15.2, 999.0], [15.3, 999.0], [15.4, 999.0], [15.5, 999.0], [15.6, 999.0], [15.7, 999.0], [15.8, 1000.0], [15.9, 1000.0], [16.0, 1000.0], [16.1, 1000.0], [16.2, 1000.0], [16.3, 1000.0], [16.4, 1000.0], [16.5, 1000.0], [16.6, 1000.0], [16.7, 1000.0], [16.8, 1000.0], [16.9, 1001.0], [17.0, 1001.0], [17.1, 1001.0], [17.2, 1001.0], [17.3, 1001.0], [17.4, 1001.0], [17.5, 1001.0], [17.6, 1001.0], [17.7, 1001.0], [17.8, 1002.0], [17.9, 1002.0], [18.0, 1002.0], [18.1, 1002.0], [18.2, 1002.0], [18.3, 1002.0], [18.4, 1002.0], [18.5, 1002.0], [18.6, 1002.0], [18.7, 1002.0], [18.8, 1002.0], [18.9, 1002.0], [19.0, 1003.0], [19.1, 1003.0], [19.2, 1003.0], [19.3, 1003.0], [19.4, 1003.0], [19.5, 1003.0], [19.6, 1003.0], [19.7, 1003.0], [19.8, 1003.0], [19.9, 1003.0], [20.0, 1004.0], [20.1, 1004.0], [20.2, 1004.0], [20.3, 1004.0], [20.4, 1004.0], [20.5, 1004.0], [20.6, 1004.0], [20.7, 1004.0], [20.8, 1004.0], [20.9, 1004.0], [21.0, 1005.0], [21.1, 1005.0], [21.2, 1005.0], [21.3, 1005.0], [21.4, 1005.0], [21.5, 1005.0], [21.6, 1005.0], [21.7, 1005.0], [21.8, 1005.0], [21.9, 1006.0], [22.0, 1006.0], [22.1, 1006.0], [22.2, 1006.0], [22.3, 1006.0], [22.4, 1006.0], [22.5, 1006.0], [22.6, 1006.0], [22.7, 1006.0], [22.8, 1006.0], [22.9, 1007.0], [23.0, 1007.0], [23.1, 1007.0], [23.2, 1007.0], [23.3, 1007.0], [23.4, 1007.0], [23.5, 1007.0], [23.6, 1007.0], [23.7, 1007.0], [23.8, 1007.0], [23.9, 1007.0], [24.0, 1008.0], [24.1, 1008.0], [24.2, 1008.0], [24.3, 1008.0], [24.4, 1008.0], [24.5, 1008.0], [24.6, 1008.0], [24.7, 1008.0], [24.8, 1009.0], [24.9, 1009.0], [25.0, 1009.0], [25.1, 1009.0], [25.2, 1009.0], [25.3, 1009.0], [25.4, 1009.0], [25.5, 1009.0], [25.6, 1009.0], [25.7, 1009.0], [25.8, 1009.0], [25.9, 1010.0], [26.0, 1010.0], [26.1, 1010.0], [26.2, 1010.0], [26.3, 1010.0], [26.4, 1010.0], [26.5, 1010.0], [26.6, 1010.0], [26.7, 1010.0], [26.8, 1011.0], [26.9, 1011.0], [27.0, 1011.0], [27.1, 1011.0], [27.2, 1011.0], [27.3, 1011.0], [27.4, 1011.0], [27.5, 1011.0], [27.6, 1011.0], [27.7, 1011.0], [27.8, 1012.0], [27.9, 1012.0], [28.0, 1012.0], [28.1, 1012.0], [28.2, 1012.0], [28.3, 1012.0], [28.4, 1012.0], [28.5, 1012.0], [28.6, 1013.0], [28.7, 1013.0], [28.8, 1013.0], [28.9, 1013.0], [29.0, 1013.0], [29.1, 1013.0], [29.2, 1013.0], [29.3, 1013.0], [29.4, 1013.0], [29.5, 1013.0], [29.6, 1013.0], [29.7, 1014.0], [29.8, 1014.0], [29.9, 1014.0], [30.0, 1014.0], [30.1, 1014.0], [30.2, 1014.0], [30.3, 1014.0], [30.4, 1014.0], [30.5, 1014.0], [30.6, 1015.0], [30.7, 1015.0], [30.8, 1015.0], [30.9, 1015.0], [31.0, 1015.0], [31.1, 1015.0], [31.2, 1016.0], [31.3, 1016.0], [31.4, 1016.0], [31.5, 1016.0], [31.6, 1016.0], [31.7, 1016.0], [31.8, 1016.0], [31.9, 1016.0], [32.0, 1016.0], [32.1, 1016.0], [32.2, 1016.0], [32.3, 1016.0], [32.4, 1016.0], [32.5, 1016.0], [32.6, 1017.0], [32.7, 1017.0], [32.8, 1017.0], [32.9, 1017.0], [33.0, 1017.0], [33.1, 1017.0], [33.2, 1017.0], [33.3, 1017.0], [33.4, 1017.0], [33.5, 1018.0], [33.6, 1018.0], [33.7, 1018.0], [33.8, 1018.0], [33.9, 1018.0], [34.0, 1018.0], [34.1, 1018.0], [34.2, 1018.0], [34.3, 1019.0], [34.4, 1019.0], [34.5, 1019.0], [34.6, 1019.0], [34.7, 1019.0], [34.8, 1019.0], [34.9, 1019.0], [35.0, 1020.0], [35.1, 1020.0], [35.2, 1020.0], [35.3, 1020.0], [35.4, 1020.0], [35.5, 1020.0], [35.6, 1020.0], [35.7, 1020.0], [35.8, 1021.0], [35.9, 1021.0], [36.0, 1021.0], [36.1, 1021.0], [36.2, 1021.0], [36.3, 1021.0], [36.4, 1021.0], [36.5, 1021.0], [36.6, 1022.0], [36.7, 1022.0], [36.8, 1022.0], [36.9, 1022.0], [37.0, 1022.0], [37.1, 1022.0], [37.2, 1022.0], [37.3, 1022.0], [37.4, 1022.0], [37.5, 1022.0], [37.6, 1023.0], [37.7, 1023.0], [37.8, 1023.0], [37.9, 1023.0], [38.0, 1023.0], [38.1, 1023.0], [38.2, 1023.0], [38.3, 1023.0], [38.4, 1023.0], [38.5, 1024.0], [38.6, 1024.0], [38.7, 1024.0], [38.8, 1024.0], [38.9, 1024.0], [39.0, 1024.0], [39.1, 1024.0], [39.2, 1025.0], [39.3, 1025.0], [39.4, 1025.0], [39.5, 1025.0], [39.6, 1025.0], [39.7, 1025.0], [39.8, 1025.0], [39.9, 1026.0], [40.0, 1026.0], [40.1, 1026.0], [40.2, 1026.0], [40.3, 1027.0], [40.4, 1027.0], [40.5, 1027.0], [40.6, 1027.0], [40.7, 1027.0], [40.8, 1027.0], [40.9, 1027.0], [41.0, 1027.0], [41.1, 1028.0], [41.2, 1028.0], [41.3, 1028.0], [41.4, 1028.0], [41.5, 1028.0], [41.6, 1029.0], [41.7, 1029.0], [41.8, 1029.0], [41.9, 1029.0], [42.0, 1029.0], [42.1, 1029.0], [42.2, 1030.0], [42.3, 1030.0], [42.4, 1030.0], [42.5, 1030.0], [42.6, 1030.0], [42.7, 1030.0], [42.8, 1031.0], [42.9, 1031.0], [43.0, 1031.0], [43.1, 1031.0], [43.2, 1031.0], [43.3, 1031.0], [43.4, 1031.0], [43.5, 1032.0], [43.6, 1032.0], [43.7, 1032.0], [43.8, 1032.0], [43.9, 1032.0], [44.0, 1033.0], [44.1, 1033.0], [44.2, 1033.0], [44.3, 1033.0], [44.4, 1033.0], [44.5, 1033.0], [44.6, 1034.0], [44.7, 1034.0], [44.8, 1034.0], [44.9, 1034.0], [45.0, 1034.0], [45.1, 1034.0], [45.2, 1034.0], [45.3, 1034.0], [45.4, 1034.0], [45.5, 1035.0], [45.6, 1035.0], [45.7, 1035.0], [45.8, 1035.0], [45.9, 1035.0], [46.0, 1036.0], [46.1, 1036.0], [46.2, 1036.0], [46.3, 1036.0], [46.4, 1036.0], [46.5, 1036.0], [46.6, 1037.0], [46.7, 1037.0], [46.8, 1037.0], [46.9, 1037.0], [47.0, 1037.0], [47.1, 1038.0], [47.2, 1038.0], [47.3, 1038.0], [47.4, 1038.0], [47.5, 1039.0], [47.6, 1039.0], [47.7, 1039.0], [47.8, 1039.0], [47.9, 1039.0], [48.0, 1039.0], [48.1, 1040.0], [48.2, 1040.0], [48.3, 1040.0], [48.4, 1040.0], [48.5, 1040.0], [48.6, 1041.0], [48.7, 1041.0], [48.8, 1041.0], [48.9, 1042.0], [49.0, 1042.0], [49.1, 1042.0], [49.2, 1042.0], [49.3, 1043.0], [49.4, 1043.0], [49.5, 1043.0], [49.6, 1043.0], [49.7, 1043.0], [49.8, 1043.0], [49.9, 1044.0], [50.0, 1044.0], [50.1, 1044.0], [50.2, 1044.0], [50.3, 1044.0], [50.4, 1045.0], [50.5, 1045.0], [50.6, 1045.0], [50.7, 1045.0], [50.8, 1045.0], [50.9, 1045.0], [51.0, 1045.0], [51.1, 1045.0], [51.2, 1046.0], [51.3, 1046.0], [51.4, 1046.0], [51.5, 1046.0], [51.6, 1046.0], [51.7, 1046.0], [51.8, 1047.0], [51.9, 1047.0], [52.0, 1047.0], [52.1, 1047.0], [52.2, 1047.0], [52.3, 1048.0], [52.4, 1048.0], [52.5, 1048.0], [52.6, 1048.0], [52.7, 1048.0], [52.8, 1048.0], [52.9, 1048.0], [53.0, 1048.0], [53.1, 1049.0], [53.2, 1049.0], [53.3, 1049.0], [53.4, 1050.0], [53.5, 1050.0], [53.6, 1050.0], [53.7, 1050.0], [53.8, 1050.0], [53.9, 1050.0], [54.0, 1050.0], [54.1, 1051.0], [54.2, 1051.0], [54.3, 1051.0], [54.4, 1051.0], [54.5, 1051.0], [54.6, 1051.0], [54.7, 1052.0], [54.8, 1052.0], [54.9, 1052.0], [55.0, 1052.0], [55.1, 1053.0], [55.2, 1053.0], [55.3, 1053.0], [55.4, 1053.0], [55.5, 1053.0], [55.6, 1053.0], [55.7, 1053.0], [55.8, 1053.0], [55.9, 1054.0], [56.0, 1054.0], [56.1, 1054.0], [56.2, 1055.0], [56.3, 1055.0], [56.4, 1055.0], [56.5, 1055.0], [56.6, 1055.0], [56.7, 1056.0], [56.8, 1056.0], [56.9, 1056.0], [57.0, 1056.0], [57.1, 1056.0], [57.2, 1057.0], [57.3, 1057.0], [57.4, 1057.0], [57.5, 1057.0], [57.6, 1057.0], [57.7, 1058.0], [57.8, 1058.0], [57.9, 1058.0], [58.0, 1058.0], [58.1, 1058.0], [58.2, 1058.0], [58.3, 1059.0], [58.4, 1059.0], [58.5, 1059.0], [58.6, 1059.0], [58.7, 1059.0], [58.8, 1059.0], [58.9, 1060.0], [59.0, 1060.0], [59.1, 1060.0], [59.2, 1060.0], [59.3, 1060.0], [59.4, 1060.0], [59.5, 1060.0], [59.6, 1060.0], [59.7, 1060.0], [59.8, 1061.0], [59.9, 1061.0], [60.0, 1061.0], [60.1, 1061.0], [60.2, 1061.0], [60.3, 1061.0], [60.4, 1061.0], [60.5, 1061.0], [60.6, 1062.0], [60.7, 1062.0], [60.8, 1062.0], [60.9, 1063.0], [61.0, 1063.0], [61.1, 1063.0], [61.2, 1063.0], [61.3, 1063.0], [61.4, 1063.0], [61.5, 1063.0], [61.6, 1064.0], [61.7, 1064.0], [61.8, 1064.0], [61.9, 1064.0], [62.0, 1064.0], [62.1, 1064.0], [62.2, 1064.0], [62.3, 1065.0], [62.4, 1065.0], [62.5, 1065.0], [62.6, 1065.0], [62.7, 1065.0], [62.8, 1066.0], [62.9, 1066.0], [63.0, 1066.0], [63.1, 1066.0], [63.2, 1066.0], [63.3, 1066.0], [63.4, 1066.0], [63.5, 1067.0], [63.6, 1067.0], [63.7, 1067.0], [63.8, 1067.0], [63.9, 1068.0], [64.0, 1068.0], [64.1, 1068.0], [64.2, 1068.0], [64.3, 1068.0], [64.4, 1069.0], [64.5, 1069.0], [64.6, 1069.0], [64.7, 1069.0], [64.8, 1069.0], [64.9, 1069.0], [65.0, 1069.0], [65.1, 1069.0], [65.2, 1070.0], [65.3, 1070.0], [65.4, 1070.0], [65.5, 1070.0], [65.6, 1070.0], [65.7, 1070.0], [65.8, 1071.0], [65.9, 1071.0], [66.0, 1071.0], [66.1, 1071.0], [66.2, 1071.0], [66.3, 1071.0], [66.4, 1072.0], [66.5, 1072.0], [66.6, 1072.0], [66.7, 1072.0], [66.8, 1072.0], [66.9, 1072.0], [67.0, 1072.0], [67.1, 1073.0], [67.2, 1073.0], [67.3, 1073.0], [67.4, 1073.0], [67.5, 1073.0], [67.6, 1073.0], [67.7, 1073.0], [67.8, 1074.0], [67.9, 1074.0], [68.0, 1074.0], [68.1, 1074.0], [68.2, 1075.0], [68.3, 1075.0], [68.4, 1075.0], [68.5, 1075.0], [68.6, 1075.0], [68.7, 1075.0], [68.8, 1076.0], [68.9, 1076.0], [69.0, 1076.0], [69.1, 1076.0], [69.2, 1076.0], [69.3, 1076.0], [69.4, 1077.0], [69.5, 1077.0], [69.6, 1077.0], [69.7, 1077.0], [69.8, 1078.0], [69.9, 1078.0], [70.0, 1078.0], [70.1, 1078.0], [70.2, 1078.0], [70.3, 1079.0], [70.4, 1079.0], [70.5, 1079.0], [70.6, 1079.0], [70.7, 1079.0], [70.8, 1079.0], [70.9, 1079.0], [71.0, 1080.0], [71.1, 1080.0], [71.2, 1080.0], [71.3, 1080.0], [71.4, 1080.0], [71.5, 1081.0], [71.6, 1081.0], [71.7, 1081.0], [71.8, 1081.0], [71.9, 1081.0], [72.0, 1081.0], [72.1, 1081.0], [72.2, 1081.0], [72.3, 1082.0], [72.4, 1082.0], [72.5, 1082.0], [72.6, 1082.0], [72.7, 1082.0], [72.8, 1082.0], [72.9, 1082.0], [73.0, 1082.0], [73.1, 1083.0], [73.2, 1083.0], [73.3, 1083.0], [73.4, 1083.0], [73.5, 1083.0], [73.6, 1083.0], [73.7, 1083.0], [73.8, 1084.0], [73.9, 1084.0], [74.0, 1084.0], [74.1, 1084.0], [74.2, 1084.0], [74.3, 1084.0], [74.4, 1085.0], [74.5, 1085.0], [74.6, 1085.0], [74.7, 1085.0], [74.8, 1085.0], [74.9, 1086.0], [75.0, 1086.0], [75.1, 1086.0], [75.2, 1086.0], [75.3, 1086.0], [75.4, 1086.0], [75.5, 1086.0], [75.6, 1087.0], [75.7, 1087.0], [75.8, 1087.0], [75.9, 1087.0], [76.0, 1088.0], [76.1, 1088.0], [76.2, 1088.0], [76.3, 1088.0], [76.4, 1088.0], [76.5, 1088.0], [76.6, 1088.0], [76.7, 1089.0], [76.8, 1089.0], [76.9, 1089.0], [77.0, 1089.0], [77.1, 1089.0], [77.2, 1089.0], [77.3, 1089.0], [77.4, 1090.0], [77.5, 1090.0], [77.6, 1090.0], [77.7, 1091.0], [77.8, 1091.0], [77.9, 1091.0], [78.0, 1091.0], [78.1, 1091.0], [78.2, 1091.0], [78.3, 1092.0], [78.4, 1092.0], [78.5, 1092.0], [78.6, 1092.0], [78.7, 1092.0], [78.8, 1092.0], [78.9, 1092.0], [79.0, 1092.0], [79.1, 1093.0], [79.2, 1093.0], [79.3, 1093.0], [79.4, 1093.0], [79.5, 1093.0], [79.6, 1093.0], [79.7, 1093.0], [79.8, 1093.0], [79.9, 1094.0], [80.0, 1094.0], [80.1, 1094.0], [80.2, 1094.0], [80.3, 1094.0], [80.4, 1094.0], [80.5, 1094.0], [80.6, 1095.0], [80.7, 1095.0], [80.8, 1095.0], [80.9, 1095.0], [81.0, 1095.0], [81.1, 1095.0], [81.2, 1095.0], [81.3, 1096.0], [81.4, 1096.0], [81.5, 1096.0], [81.6, 1096.0], [81.7, 1096.0], [81.8, 1096.0], [81.9, 1096.0], [82.0, 1097.0], [82.1, 1097.0], [82.2, 1097.0], [82.3, 1097.0], [82.4, 1097.0], [82.5, 1098.0], [82.6, 1098.0], [82.7, 1098.0], [82.8, 1098.0], [82.9, 1098.0], [83.0, 1098.0], [83.1, 1099.0], [83.2, 1099.0], [83.3, 1099.0], [83.4, 1099.0], [83.5, 1100.0], [83.6, 1100.0], [83.7, 1100.0], [83.8, 1100.0], [83.9, 1100.0], [84.0, 1101.0], [84.1, 1101.0], [84.2, 1101.0], [84.3, 1101.0], [84.4, 1101.0], [84.5, 1102.0], [84.6, 1102.0], [84.7, 1102.0], [84.8, 1103.0], [84.9, 1103.0], [85.0, 1103.0], [85.1, 1104.0], [85.2, 1104.0], [85.3, 1105.0], [85.4, 1105.0], [85.5, 1105.0], [85.6, 1106.0], [85.7, 1106.0], [85.8, 1106.0], [85.9, 1107.0], [86.0, 1107.0], [86.1, 1107.0], [86.2, 1107.0], [86.3, 1108.0], [86.4, 1109.0], [86.5, 1109.0], [86.6, 1109.0], [86.7, 1109.0], [86.8, 1110.0], [86.9, 1110.0], [87.0, 1111.0], [87.1, 1111.0], [87.2, 1112.0], [87.3, 1112.0], [87.4, 1113.0], [87.5, 1113.0], [87.6, 1114.0], [87.7, 1114.0], [87.8, 1115.0], [87.9, 1115.0], [88.0, 1116.0], [88.1, 1117.0], [88.2, 1118.0], [88.3, 1119.0], [88.4, 1120.0], [88.5, 1120.0], [88.6, 1122.0], [88.7, 1123.0], [88.8, 1124.0], [88.9, 1125.0], [89.0, 1126.0], [89.1, 1127.0], [89.2, 1128.0], [89.3, 1129.0], [89.4, 1130.0], [89.5, 1130.0], [89.6, 1131.0], [89.7, 1131.0], [89.8, 1132.0], [89.9, 1132.0], [90.0, 1133.0], [90.1, 1134.0], [90.2, 1135.0], [90.3, 1135.0], [90.4, 1136.0], [90.5, 1136.0], [90.6, 1137.0], [90.7, 1138.0], [90.8, 1138.0], [90.9, 1139.0], [91.0, 1140.0], [91.1, 1141.0], [91.2, 1141.0], [91.3, 1142.0], [91.4, 1142.0], [91.5, 1143.0], [91.6, 1145.0], [91.7, 1145.0], [91.8, 1146.0], [91.9, 1147.0], [92.0, 1147.0], [92.1, 1147.0], [92.2, 1148.0], [92.3, 1149.0], [92.4, 1150.0], [92.5, 1151.0], [92.6, 1151.0], [92.7, 1152.0], [92.8, 1152.0], [92.9, 1153.0], [93.0, 1154.0], [93.1, 1155.0], [93.2, 1155.0], [93.3, 1156.0], [93.4, 1156.0], [93.5, 1157.0], [93.6, 1157.0], [93.7, 1158.0], [93.8, 1159.0], [93.9, 1159.0], [94.0, 1161.0], [94.1, 1161.0], [94.2, 1161.0], [94.3, 1163.0], [94.4, 1164.0], [94.5, 1165.0], [94.6, 1166.0], [94.7, 1166.0], [94.8, 1167.0], [94.9, 1168.0], [95.0, 1169.0], [95.1, 1170.0], [95.2, 1173.0], [95.3, 1174.0], [95.4, 1174.0], [95.5, 1177.0], [95.6, 1179.0], [95.7, 1180.0], [95.8, 1181.0], [95.9, 1182.0], [96.0, 1182.0], [96.1, 1185.0], [96.2, 1185.0], [96.3, 1187.0], [96.4, 1188.0], [96.5, 1189.0], [96.6, 1190.0], [96.7, 1192.0], [96.8, 1194.0], [96.9, 1194.0], [97.0, 1196.0], [97.1, 1198.0], [97.2, 1206.0], [97.3, 1212.0], [97.4, 1214.0], [97.5, 1220.0], [97.6, 1229.0], [97.7, 1237.0], [97.8, 1240.0], [97.9, 1247.0], [98.0, 1250.0], [98.1, 1254.0], [98.2, 1264.0], [98.3, 1271.0], [98.4, 1280.0], [98.5, 1288.0], [98.6, 1294.0], [98.7, 1298.0], [98.8, 1320.0], [98.9, 1331.0], [99.0, 1366.0], [99.1, 1390.0], [99.2, 1426.0], [99.3, 1680.0], [99.4, 2020.0], [99.5, 2050.0], [99.6, 2106.0], [99.7, 3019.0], [99.8, 3104.0], [99.9, 4011.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 236.0], [0.1, 241.0], [0.2, 242.0], [0.3, 242.0], [0.4, 243.0], [0.5, 243.0], [0.6, 243.0], [0.7, 244.0], [0.8, 244.0], [0.9, 244.0], [1.0, 244.0], [1.1, 244.0], [1.2, 245.0], [1.3, 245.0], [1.4, 245.0], [1.5, 245.0], [1.6, 245.0], [1.7, 245.0], [1.8, 245.0], [1.9, 246.0], [2.0, 246.0], [2.1, 246.0], [2.2, 246.0], [2.3, 246.0], [2.4, 246.0], [2.5, 246.0], [2.6, 246.0], [2.7, 246.0], [2.8, 246.0], [2.9, 247.0], [3.0, 247.0], [3.1, 247.0], [3.2, 247.0], [3.3, 247.0], [3.4, 247.0], [3.5, 247.0], [3.6, 247.0], [3.7, 247.0], [3.8, 247.0], [3.9, 247.0], [4.0, 247.0], [4.1, 248.0], [4.2, 248.0], [4.3, 248.0], [4.4, 248.0], [4.5, 248.0], [4.6, 248.0], [4.7, 248.0], [4.8, 248.0], [4.9, 248.0], [5.0, 248.0], [5.1, 248.0], [5.2, 248.0], [5.3, 248.0], [5.4, 248.0], [5.5, 248.0], [5.6, 248.0], [5.7, 248.0], [5.8, 249.0], [5.9, 249.0], [6.0, 249.0], [6.1, 249.0], [6.2, 249.0], [6.3, 249.0], [6.4, 249.0], [6.5, 249.0], [6.6, 249.0], [6.7, 249.0], [6.8, 249.0], [6.9, 249.0], [7.0, 249.0], [7.1, 249.0], [7.2, 249.0], [7.3, 249.0], [7.4, 249.0], [7.5, 249.0], [7.6, 249.0], [7.7, 249.0], [7.8, 249.0], [7.9, 250.0], [8.0, 250.0], [8.1, 250.0], [8.2, 250.0], [8.3, 250.0], [8.4, 250.0], [8.5, 250.0], [8.6, 250.0], [8.7, 250.0], [8.8, 250.0], [8.9, 250.0], [9.0, 250.0], [9.1, 250.0], [9.2, 250.0], [9.3, 250.0], [9.4, 250.0], [9.5, 250.0], [9.6, 250.0], [9.7, 250.0], [9.8, 250.0], [9.9, 250.0], [10.0, 250.0], [10.1, 250.0], [10.2, 250.0], [10.3, 250.0], [10.4, 251.0], [10.5, 251.0], [10.6, 251.0], [10.7, 251.0], [10.8, 251.0], [10.9, 251.0], [11.0, 251.0], [11.1, 251.0], [11.2, 251.0], [11.3, 251.0], [11.4, 251.0], [11.5, 251.0], [11.6, 251.0], [11.7, 251.0], [11.8, 251.0], [11.9, 251.0], [12.0, 251.0], [12.1, 251.0], [12.2, 251.0], [12.3, 251.0], [12.4, 251.0], [12.5, 251.0], [12.6, 251.0], [12.7, 251.0], [12.8, 251.0], [12.9, 251.0], [13.0, 251.0], [13.1, 251.0], [13.2, 251.0], [13.3, 251.0], [13.4, 252.0], [13.5, 252.0], [13.6, 252.0], [13.7, 252.0], [13.8, 252.0], [13.9, 252.0], [14.0, 252.0], [14.1, 252.0], [14.2, 252.0], [14.3, 252.0], [14.4, 252.0], [14.5, 252.0], [14.6, 252.0], [14.7, 252.0], [14.8, 252.0], [14.9, 252.0], [15.0, 252.0], [15.1, 252.0], [15.2, 252.0], [15.3, 252.0], [15.4, 252.0], [15.5, 252.0], [15.6, 252.0], [15.7, 252.0], [15.8, 252.0], [15.9, 252.0], [16.0, 253.0], [16.1, 253.0], [16.2, 253.0], [16.3, 253.0], [16.4, 253.0], [16.5, 253.0], [16.6, 253.0], [16.7, 253.0], [16.8, 253.0], [16.9, 253.0], [17.0, 253.0], [17.1, 253.0], [17.2, 253.0], [17.3, 253.0], [17.4, 253.0], [17.5, 253.0], [17.6, 253.0], [17.7, 253.0], [17.8, 253.0], [17.9, 253.0], [18.0, 253.0], [18.1, 253.0], [18.2, 253.0], [18.3, 253.0], [18.4, 253.0], [18.5, 253.0], [18.6, 253.0], [18.7, 253.0], [18.8, 253.0], [18.9, 253.0], [19.0, 254.0], [19.1, 254.0], [19.2, 254.0], [19.3, 254.0], [19.4, 254.0], [19.5, 254.0], [19.6, 254.0], [19.7, 254.0], [19.8, 254.0], [19.9, 254.0], [20.0, 254.0], [20.1, 254.0], [20.2, 254.0], [20.3, 254.0], [20.4, 254.0], [20.5, 254.0], [20.6, 254.0], [20.7, 254.0], [20.8, 254.0], [20.9, 254.0], [21.0, 254.0], [21.1, 254.0], [21.2, 254.0], [21.3, 254.0], [21.4, 254.0], [21.5, 254.0], [21.6, 254.0], [21.7, 254.0], [21.8, 254.0], [21.9, 254.0], [22.0, 254.0], [22.1, 254.0], [22.2, 254.0], [22.3, 254.0], [22.4, 254.0], [22.5, 254.0], [22.6, 254.0], [22.7, 254.0], [22.8, 254.0], [22.9, 255.0], [23.0, 255.0], [23.1, 255.0], [23.2, 255.0], [23.3, 255.0], [23.4, 255.0], [23.5, 255.0], [23.6, 255.0], [23.7, 255.0], [23.8, 255.0], [23.9, 255.0], [24.0, 255.0], [24.1, 255.0], [24.2, 255.0], [24.3, 255.0], [24.4, 255.0], [24.5, 255.0], [24.6, 255.0], [24.7, 255.0], [24.8, 255.0], [24.9, 255.0], [25.0, 255.0], [25.1, 255.0], [25.2, 255.0], [25.3, 255.0], [25.4, 255.0], [25.5, 255.0], [25.6, 255.0], [25.7, 255.0], [25.8, 255.0], [25.9, 255.0], [26.0, 255.0], [26.1, 255.0], [26.2, 255.0], [26.3, 255.0], [26.4, 256.0], [26.5, 256.0], [26.6, 256.0], [26.7, 256.0], [26.8, 256.0], [26.9, 256.0], [27.0, 256.0], [27.1, 256.0], [27.2, 256.0], [27.3, 256.0], [27.4, 256.0], [27.5, 256.0], [27.6, 256.0], [27.7, 256.0], [27.8, 256.0], [27.9, 256.0], [28.0, 256.0], [28.1, 256.0], [28.2, 256.0], [28.3, 256.0], [28.4, 256.0], [28.5, 256.0], [28.6, 256.0], [28.7, 256.0], [28.8, 256.0], [28.9, 256.0], [29.0, 256.0], [29.1, 256.0], [29.2, 256.0], [29.3, 256.0], [29.4, 256.0], [29.5, 256.0], [29.6, 256.0], [29.7, 256.0], [29.8, 257.0], [29.9, 257.0], [30.0, 257.0], [30.1, 257.0], [30.2, 257.0], [30.3, 257.0], [30.4, 257.0], [30.5, 257.0], [30.6, 257.0], [30.7, 257.0], [30.8, 257.0], [30.9, 257.0], [31.0, 257.0], [31.1, 257.0], [31.2, 257.0], [31.3, 257.0], [31.4, 257.0], [31.5, 257.0], [31.6, 257.0], [31.7, 257.0], [31.8, 257.0], [31.9, 257.0], [32.0, 257.0], [32.1, 257.0], [32.2, 257.0], [32.3, 257.0], [32.4, 257.0], [32.5, 257.0], [32.6, 257.0], [32.7, 257.0], [32.8, 257.0], [32.9, 257.0], [33.0, 257.0], [33.1, 258.0], [33.2, 258.0], [33.3, 258.0], [33.4, 258.0], [33.5, 258.0], [33.6, 258.0], [33.7, 258.0], [33.8, 258.0], [33.9, 258.0], [34.0, 258.0], [34.1, 258.0], [34.2, 258.0], [34.3, 258.0], [34.4, 258.0], [34.5, 258.0], [34.6, 258.0], [34.7, 258.0], [34.8, 258.0], [34.9, 258.0], [35.0, 258.0], [35.1, 258.0], [35.2, 258.0], [35.3, 258.0], [35.4, 258.0], [35.5, 259.0], [35.6, 259.0], [35.7, 259.0], [35.8, 259.0], [35.9, 259.0], [36.0, 259.0], [36.1, 259.0], [36.2, 259.0], [36.3, 259.0], [36.4, 259.0], [36.5, 259.0], [36.6, 259.0], [36.7, 259.0], [36.8, 259.0], [36.9, 259.0], [37.0, 259.0], [37.1, 259.0], [37.2, 259.0], [37.3, 259.0], [37.4, 259.0], [37.5, 259.0], [37.6, 259.0], [37.7, 259.0], [37.8, 259.0], [37.9, 260.0], [38.0, 260.0], [38.1, 260.0], [38.2, 260.0], [38.3, 260.0], [38.4, 260.0], [38.5, 260.0], [38.6, 260.0], [38.7, 260.0], [38.8, 260.0], [38.9, 260.0], [39.0, 260.0], [39.1, 260.0], [39.2, 260.0], [39.3, 260.0], [39.4, 260.0], [39.5, 260.0], [39.6, 260.0], [39.7, 260.0], [39.8, 260.0], [39.9, 260.0], [40.0, 260.0], [40.1, 260.0], [40.2, 260.0], [40.3, 260.0], [40.4, 260.0], [40.5, 260.0], [40.6, 261.0], [40.7, 261.0], [40.8, 261.0], [40.9, 261.0], [41.0, 261.0], [41.1, 261.0], [41.2, 261.0], [41.3, 261.0], [41.4, 261.0], [41.5, 261.0], [41.6, 261.0], [41.7, 261.0], [41.8, 261.0], [41.9, 261.0], [42.0, 261.0], [42.1, 261.0], [42.2, 261.0], [42.3, 261.0], [42.4, 261.0], [42.5, 261.0], [42.6, 261.0], [42.7, 261.0], [42.8, 261.0], [42.9, 262.0], [43.0, 262.0], [43.1, 262.0], [43.2, 262.0], [43.3, 262.0], [43.4, 262.0], [43.5, 262.0], [43.6, 262.0], [43.7, 262.0], [43.8, 262.0], [43.9, 262.0], [44.0, 262.0], [44.1, 262.0], [44.2, 262.0], [44.3, 262.0], [44.4, 262.0], [44.5, 262.0], [44.6, 262.0], [44.7, 262.0], [44.8, 262.0], [44.9, 263.0], [45.0, 263.0], [45.1, 263.0], [45.2, 263.0], [45.3, 263.0], [45.4, 263.0], [45.5, 263.0], [45.6, 263.0], [45.7, 263.0], [45.8, 263.0], [45.9, 263.0], [46.0, 263.0], [46.1, 263.0], [46.2, 263.0], [46.3, 263.0], [46.4, 263.0], [46.5, 263.0], [46.6, 263.0], [46.7, 263.0], [46.8, 263.0], [46.9, 263.0], [47.0, 263.0], [47.1, 263.0], [47.2, 264.0], [47.3, 264.0], [47.4, 264.0], [47.5, 264.0], [47.6, 264.0], [47.7, 264.0], [47.8, 264.0], [47.9, 264.0], [48.0, 264.0], [48.1, 264.0], [48.2, 264.0], [48.3, 264.0], [48.4, 264.0], [48.5, 264.0], [48.6, 264.0], [48.7, 264.0], [48.8, 264.0], [48.9, 264.0], [49.0, 264.0], [49.1, 265.0], [49.2, 265.0], [49.3, 265.0], [49.4, 265.0], [49.5, 265.0], [49.6, 265.0], [49.7, 265.0], [49.8, 265.0], [49.9, 265.0], [50.0, 265.0], [50.1, 265.0], [50.2, 265.0], [50.3, 265.0], [50.4, 265.0], [50.5, 265.0], [50.6, 265.0], [50.7, 265.0], [50.8, 265.0], [50.9, 265.0], [51.0, 265.0], [51.1, 265.0], [51.2, 265.0], [51.3, 265.0], [51.4, 265.0], [51.5, 266.0], [51.6, 266.0], [51.7, 266.0], [51.8, 266.0], [51.9, 266.0], [52.0, 266.0], [52.1, 266.0], [52.2, 266.0], [52.3, 266.0], [52.4, 266.0], [52.5, 266.0], [52.6, 266.0], [52.7, 266.0], [52.8, 266.0], [52.9, 266.0], [53.0, 266.0], [53.1, 266.0], [53.2, 266.0], [53.3, 266.0], [53.4, 266.0], [53.5, 266.0], [53.6, 267.0], [53.7, 267.0], [53.8, 267.0], [53.9, 267.0], [54.0, 267.0], [54.1, 267.0], [54.2, 267.0], [54.3, 267.0], [54.4, 267.0], [54.5, 267.0], [54.6, 267.0], [54.7, 267.0], [54.8, 267.0], [54.9, 267.0], [55.0, 267.0], [55.1, 267.0], [55.2, 267.0], [55.3, 267.0], [55.4, 267.0], [55.5, 267.0], [55.6, 267.0], [55.7, 267.0], [55.8, 267.0], [55.9, 267.0], [56.0, 267.0], [56.1, 267.0], [56.2, 267.0], [56.3, 267.0], [56.4, 268.0], [56.5, 268.0], [56.6, 268.0], [56.7, 268.0], [56.8, 268.0], [56.9, 268.0], [57.0, 268.0], [57.1, 268.0], [57.2, 268.0], [57.3, 268.0], [57.4, 268.0], [57.5, 268.0], [57.6, 268.0], [57.7, 268.0], [57.8, 268.0], [57.9, 268.0], [58.0, 268.0], [58.1, 268.0], [58.2, 268.0], [58.3, 269.0], [58.4, 269.0], [58.5, 269.0], [58.6, 269.0], [58.7, 269.0], [58.8, 269.0], [58.9, 269.0], [59.0, 269.0], [59.1, 269.0], [59.2, 269.0], [59.3, 269.0], [59.4, 269.0], [59.5, 269.0], [59.6, 269.0], [59.7, 269.0], [59.8, 269.0], [59.9, 269.0], [60.0, 269.0], [60.1, 269.0], [60.2, 269.0], [60.3, 269.0], [60.4, 269.0], [60.5, 269.0], [60.6, 269.0], [60.7, 269.0], [60.8, 269.0], [60.9, 269.0], [61.0, 270.0], [61.1, 270.0], [61.2, 270.0], [61.3, 270.0], [61.4, 270.0], [61.5, 270.0], [61.6, 270.0], [61.7, 270.0], [61.8, 270.0], [61.9, 270.0], [62.0, 270.0], [62.1, 270.0], [62.2, 270.0], [62.3, 270.0], [62.4, 270.0], [62.5, 270.0], [62.6, 270.0], [62.7, 270.0], [62.8, 270.0], [62.9, 270.0], [63.0, 270.0], [63.1, 270.0], [63.2, 270.0], [63.3, 270.0], [63.4, 271.0], [63.5, 271.0], [63.6, 271.0], [63.7, 271.0], [63.8, 271.0], [63.9, 271.0], [64.0, 271.0], [64.1, 271.0], [64.2, 271.0], [64.3, 271.0], [64.4, 271.0], [64.5, 271.0], [64.6, 271.0], [64.7, 271.0], [64.8, 271.0], [64.9, 271.0], [65.0, 271.0], [65.1, 271.0], [65.2, 271.0], [65.3, 271.0], [65.4, 271.0], [65.5, 271.0], [65.6, 271.0], [65.7, 272.0], [65.8, 272.0], [65.9, 272.0], [66.0, 272.0], [66.1, 272.0], [66.2, 272.0], [66.3, 272.0], [66.4, 272.0], [66.5, 272.0], [66.6, 272.0], [66.7, 272.0], [66.8, 272.0], [66.9, 272.0], [67.0, 272.0], [67.1, 272.0], [67.2, 272.0], [67.3, 272.0], [67.4, 272.0], [67.5, 272.0], [67.6, 272.0], [67.7, 272.0], [67.8, 273.0], [67.9, 273.0], [68.0, 273.0], [68.1, 273.0], [68.2, 273.0], [68.3, 273.0], [68.4, 273.0], [68.5, 273.0], [68.6, 273.0], [68.7, 273.0], [68.8, 273.0], [68.9, 273.0], [69.0, 273.0], [69.1, 273.0], [69.2, 273.0], [69.3, 273.0], [69.4, 273.0], [69.5, 273.0], [69.6, 273.0], [69.7, 273.0], [69.8, 273.0], [69.9, 273.0], [70.0, 273.0], [70.1, 273.0], [70.2, 273.0], [70.3, 273.0], [70.4, 274.0], [70.5, 274.0], [70.6, 274.0], [70.7, 274.0], [70.8, 274.0], [70.9, 274.0], [71.0, 274.0], [71.1, 274.0], [71.2, 274.0], [71.3, 274.0], [71.4, 274.0], [71.5, 274.0], [71.6, 274.0], [71.7, 274.0], [71.8, 274.0], [71.9, 274.0], [72.0, 274.0], [72.1, 274.0], [72.2, 274.0], [72.3, 274.0], [72.4, 274.0], [72.5, 274.0], [72.6, 274.0], [72.7, 274.0], [72.8, 274.0], [72.9, 274.0], [73.0, 274.0], [73.1, 275.0], [73.2, 275.0], [73.3, 275.0], [73.4, 275.0], [73.5, 275.0], [73.6, 275.0], [73.7, 275.0], [73.8, 275.0], [73.9, 275.0], [74.0, 275.0], [74.1, 275.0], [74.2, 275.0], [74.3, 275.0], [74.4, 275.0], [74.5, 275.0], [74.6, 275.0], [74.7, 275.0], [74.8, 275.0], [74.9, 276.0], [75.0, 276.0], [75.1, 276.0], [75.2, 276.0], [75.3, 276.0], [75.4, 276.0], [75.5, 276.0], [75.6, 276.0], [75.7, 276.0], [75.8, 276.0], [75.9, 276.0], [76.0, 276.0], [76.1, 276.0], [76.2, 276.0], [76.3, 276.0], [76.4, 276.0], [76.5, 276.0], [76.6, 276.0], [76.7, 276.0], [76.8, 276.0], [76.9, 276.0], [77.0, 276.0], [77.1, 276.0], [77.2, 277.0], [77.3, 277.0], [77.4, 277.0], [77.5, 277.0], [77.6, 277.0], [77.7, 277.0], [77.8, 277.0], [77.9, 277.0], [78.0, 277.0], [78.1, 277.0], [78.2, 277.0], [78.3, 277.0], [78.4, 277.0], [78.5, 277.0], [78.6, 277.0], [78.7, 277.0], [78.8, 277.0], [78.9, 277.0], [79.0, 277.0], [79.1, 277.0], [79.2, 277.0], [79.3, 277.0], [79.4, 278.0], [79.5, 278.0], [79.6, 278.0], [79.7, 278.0], [79.8, 278.0], [79.9, 278.0], [80.0, 278.0], [80.1, 278.0], [80.2, 278.0], [80.3, 278.0], [80.4, 278.0], [80.5, 278.0], [80.6, 278.0], [80.7, 278.0], [80.8, 278.0], [80.9, 278.0], [81.0, 278.0], [81.1, 278.0], [81.2, 279.0], [81.3, 279.0], [81.4, 279.0], [81.5, 279.0], [81.6, 279.0], [81.7, 279.0], [81.8, 279.0], [81.9, 279.0], [82.0, 279.0], [82.1, 279.0], [82.2, 279.0], [82.3, 279.0], [82.4, 279.0], [82.5, 279.0], [82.6, 279.0], [82.7, 280.0], [82.8, 280.0], [82.9, 280.0], [83.0, 280.0], [83.1, 280.0], [83.2, 280.0], [83.3, 280.0], [83.4, 280.0], [83.5, 280.0], [83.6, 280.0], [83.7, 280.0], [83.8, 280.0], [83.9, 280.0], [84.0, 280.0], [84.1, 281.0], [84.2, 281.0], [84.3, 281.0], [84.4, 281.0], [84.5, 281.0], [84.6, 281.0], [84.7, 281.0], [84.8, 281.0], [84.9, 281.0], [85.0, 281.0], [85.1, 282.0], [85.2, 282.0], [85.3, 282.0], [85.4, 282.0], [85.5, 282.0], [85.6, 282.0], [85.7, 282.0], [85.8, 282.0], [85.9, 283.0], [86.0, 283.0], [86.1, 283.0], [86.2, 283.0], [86.3, 283.0], [86.4, 283.0], [86.5, 283.0], [86.6, 283.0], [86.7, 283.0], [86.8, 283.0], [86.9, 284.0], [87.0, 284.0], [87.1, 284.0], [87.2, 284.0], [87.3, 284.0], [87.4, 284.0], [87.5, 284.0], [87.6, 284.0], [87.7, 285.0], [87.8, 285.0], [87.9, 285.0], [88.0, 285.0], [88.1, 285.0], [88.2, 285.0], [88.3, 286.0], [88.4, 286.0], [88.5, 286.0], [88.6, 286.0], [88.7, 286.0], [88.8, 286.0], [88.9, 286.0], [89.0, 286.0], [89.1, 287.0], [89.2, 287.0], [89.3, 287.0], [89.4, 287.0], [89.5, 287.0], [89.6, 287.0], [89.7, 287.0], [89.8, 287.0], [89.9, 288.0], [90.0, 288.0], [90.1, 288.0], [90.2, 288.0], [90.3, 288.0], [90.4, 288.0], [90.5, 288.0], [90.6, 288.0], [90.7, 289.0], [90.8, 289.0], [90.9, 289.0], [91.0, 289.0], [91.1, 289.0], [91.2, 289.0], [91.3, 289.0], [91.4, 289.0], [91.5, 290.0], [91.6, 290.0], [91.7, 290.0], [91.8, 290.0], [91.9, 290.0], [92.0, 291.0], [92.1, 291.0], [92.2, 291.0], [92.3, 291.0], [92.4, 291.0], [92.5, 292.0], [92.6, 292.0], [92.7, 292.0], [92.8, 292.0], [92.9, 292.0], [93.0, 293.0], [93.1, 293.0], [93.2, 293.0], [93.3, 293.0], [93.4, 294.0], [93.5, 294.0], [93.6, 294.0], [93.7, 294.0], [93.8, 294.0], [93.9, 295.0], [94.0, 295.0], [94.1, 295.0], [94.2, 295.0], [94.3, 295.0], [94.4, 296.0], [94.5, 296.0], [94.6, 296.0], [94.7, 296.0], [94.8, 296.0], [94.9, 296.0], [95.0, 297.0], [95.1, 297.0], [95.2, 298.0], [95.3, 298.0], [95.4, 298.0], [95.5, 298.0], [95.6, 298.0], [95.7, 298.0], [95.8, 298.0], [95.9, 299.0], [96.0, 299.0], [96.1, 299.0], [96.2, 299.0], [96.3, 300.0], [96.4, 300.0], [96.5, 301.0], [96.6, 302.0], [96.7, 302.0], [96.8, 304.0], [96.9, 304.0], [97.0, 305.0], [97.1, 305.0], [97.2, 306.0], [97.3, 308.0], [97.4, 308.0], [97.5, 310.0], [97.6, 313.0], [97.7, 314.0], [97.8, 316.0], [97.9, 321.0], [98.0, 324.0], [98.1, 326.0], [98.2, 330.0], [98.3, 335.0], [98.4, 337.0], [98.5, 346.0], [98.6, 349.0], [98.7, 355.0], [98.8, 374.0], [98.9, 379.0], [99.0, 399.0], [99.1, 436.0], [99.2, 501.0], [99.3, 525.0], [99.4, 697.0], [99.5, 873.0], [99.6, 898.0], [99.7, 1242.0], [99.8, 3266.0], [99.9, 4272.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 3213.0, "series": [{"data": [[2200.0, 3.0], [600.0, 1.0], [700.0, 1.0], [200.0, 3213.0], [3200.0, 4.0], [800.0, 3.0], [900.0, 2.0], [4200.0, 4.0], [1100.0, 1.0], [300.0, 86.0], [1200.0, 1.0], [400.0, 11.0], [500.0, 3.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[2100.0, 1.0], [2900.0, 2.0], [3000.0, 4.0], [3100.0, 1.0], [900.0, 525.0], [3900.0, 1.0], [1000.0, 2257.0], [4000.0, 4.0], [1100.0, 455.0], [1200.0, 53.0], [1300.0, 14.0], [1400.0, 3.0], [1500.0, 2.0], [1600.0, 1.0], [1900.0, 1.0], [2000.0, 8.0], [8000.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[2200.0, 1.0], [600.0, 3.0], [700.0, 2.0], [200.0, 3207.0], [3200.0, 3.0], [800.0, 4.0], [900.0, 2.0], [4200.0, 5.0], [1100.0, 1.0], [300.0, 93.0], [1200.0, 1.0], [400.0, 6.0], [500.0, 5.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6616.0, "series": [{"data": [[0.0, 6616.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3336.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 37.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 10.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.208835341365475, "minX": 1.74155208E12, "maxY": 19.597979797979786, "series": [{"data": [[1.7415525E12, 18.825203252032516], [1.7415528E12, 17.944223107569726], [1.7415522E12, 18.575098814229243], [1.74155286E12, 19.597979797979786], [1.74155316E12, 17.921212121212125], [1.74155256E12, 18.550781250000007], [1.74155322E12, 17.62027833001989], [1.74155226E12, 18.51632653061223], [1.74155262E12, 18.3891129032258], [1.74155292E12, 17.834331337325324], [1.74155232E12, 19.049800796812743], [1.74155298E12, 17.8888888888889], [1.74155328E12, 17.680306905370824], [1.74155238E12, 18.442460317460334], [1.74155268E12, 18.665995975855147], [1.74155208E12, 17.320754716981135], [1.74155274E12, 18.92246520874751], [1.74155304E12, 17.208835341365475], [1.74155244E12, 18.429141716566864], [1.7415531E12, 18.322709163346612], [1.74155214E12, 19.054108216432866]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74155328E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 253.0, "minX": 1.0, "maxY": 4280.0, "series": [{"data": [[3.0, 320.5], [7.0, 286.0], [9.0, 301.0], [10.0, 279.25], [11.0, 253.0], [12.0, 279.0], [13.0, 274.6], [14.0, 269.5], [15.0, 267.13194444444446], [16.0, 265.8509316770189], [17.0, 266.95733788395927], [18.0, 263.5423728813556], [19.0, 265.7707182320443], [20.0, 270.54987834549917], [21.0, 278.83962264150944], [22.0, 264.54128440366975], [23.0, 473.37931034482773], [24.0, 623.2631578947369], [25.0, 280.0], [26.0, 262.75], [27.0, 864.6], [28.0, 3760.5], [29.0, 2264.0], [30.0, 4262.5], [31.0, 255.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[18.325832583258315, 276.91719171917146]], "isOverall": false, "label": "Booking-Aggregated", "isController": false}, {"data": [[9.0, 1136.0], [10.0, 1085.0], [11.0, 1000.0], [12.0, 1102.0], [13.0, 1036.7], [14.0, 1066.1875], [15.0, 1063.1604938271607], [16.0, 1057.0966850828725], [17.0, 1055.1669316375205], [18.0, 1053.5690140845084], [19.0, 1048.0605612998534], [20.0, 1055.0130890052355], [21.0, 1102.0691489361704], [22.0, 1060.1012658227849], [23.0, 1299.2250000000004], [6.0, 1488.0], [24.0, 1569.466666666667], [26.0, 1862.6666666666667], [27.0, 1747.6666666666667], [7.0, 1151.5], [28.0, 2730.6666666666665], [29.0, 1546.0], [30.0, 2508.5]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[18.166516651665138, 1067.3819381938188]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 322.0], [3.0, 312.0], [4.0, 295.0], [6.0, 306.0], [7.0, 294.0], [8.0, 289.0], [9.0, 302.0], [10.0, 298.0], [11.0, 305.0], [12.0, 275.3333333333333], [13.0, 268.3333333333333], [14.0, 268.875], [15.0, 270.08737864077654], [16.0, 270.1028806584361], [1.0, 292.0], [17.0, 270.1580952380958], [18.0, 267.0563583815029], [19.0, 268.21606648199514], [20.0, 269.36931818181785], [21.0, 275.16730038022814], [22.0, 272.5801526717556], [23.0, 266.68181818181813], [24.0, 567.0869565217391], [25.0, 461.0], [26.0, 263.5], [27.0, 1062.4], [28.0, 2278.0], [29.0, 3770.0], [30.0, 4265.0], [31.0, 4280.0]], "isOverall": false, "label": "Search Booking", "isController": false}, {"data": [[18.610561056105666, 279.33243324332534]], "isOverall": false, "label": "Search Booking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 31.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 494.3666666666667, "minX": 1.74155208E12, "maxY": 7471.433333333333, "series": [{"data": [[1.7415525E12, 7177.566666666667], [1.7415528E12, 7315.766666666666], [1.7415522E12, 7389.233333333334], [1.74155286E12, 7208.616666666667], [1.74155316E12, 7224.283333333334], [1.74155256E12, 7471.433333333333], [1.74155322E12, 7329.4], [1.74155226E12, 7128.8], [1.74155262E12, 7235.633333333333], [1.74155292E12, 7308.05], [1.74155232E12, 7318.2], [1.74155298E12, 7352.983333333334], [1.74155328E12, 5711.033333333334], [1.74155238E12, 7363.466666666666], [1.74155268E12, 7246.666666666667], [1.74155208E12, 1536.3333333333333], [1.74155274E12, 7335.833333333333], [1.74155304E12, 7268.883333333333], [1.74155244E12, 7300.183333333333], [1.7415531E12, 7311.666666666667], [1.74155214E12, 7262.366666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7415525E12, 2263.1666666666665], [1.7415528E12, 2309.9], [1.7415522E12, 2327.266666666667], [1.74155286E12, 2277.3333333333335], [1.74155316E12, 2270.95], [1.74155256E12, 2352.3333333333335], [1.74155322E12, 2313.5833333333335], [1.74155226E12, 2248.1666666666665], [1.74155262E12, 2282.3], [1.74155292E12, 2303.0], [1.74155232E12, 2307.1666666666665], [1.74155298E12, 2312.266666666667], [1.74155328E12, 1789.45], [1.74155238E12, 2313.4], [1.74155268E12, 2282.116666666667], [1.74155208E12, 494.3666666666667], [1.74155274E12, 2310.866666666667], [1.74155304E12, 2285.8], [1.74155244E12, 2306.2166666666667], [1.7415531E12, 2310.4666666666667], [1.74155214E12, 2293.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74155328E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 259.8012048192772, "minX": 1.74155208E12, "maxY": 1184.4787878787877, "series": [{"data": [[1.7415525E12, 261.230303030303], [1.7415528E12, 260.85029940119745], [1.7415522E12, 260.2781065088759], [1.74155286E12, 401.53293413173657], [1.74155316E12, 262.13939393939404], [1.74155256E12, 260.01754385964915], [1.74155322E12, 295.74999999999983], [1.74155226E12, 327.71604938271616], [1.74155262E12, 272.878787878788], [1.74155292E12, 259.92261904761926], [1.74155232E12, 297.9226190476193], [1.74155298E12, 260.4550898203594], [1.74155328E12, 293.65384615384613], [1.74155238E12, 261.2619047619048], [1.74155268E12, 261.67682926829275], [1.74155208E12, 262.0], [1.74155274E12, 260.48502994011994], [1.74155304E12, 261.68484848484843], [1.74155244E12, 261.0179640718563], [1.7415531E12, 266.16666666666686], [1.74155214E12, 259.8012048192772]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[1.7415525E12, 1041.82208588957], [1.7415528E12, 1039.2840236686386], [1.7415522E12, 1040.535714285714], [1.74155286E12, 1157.6257668711653], [1.74155316E12, 1049.0617283950612], [1.74155256E12, 1041.1976047904193], [1.74155322E12, 1170.8343195266268], [1.74155226E12, 1184.4787878787877], [1.74155262E12, 1065.2275449101794], [1.74155292E12, 1038.9879518072287], [1.74155232E12, 1041.4457831325299], [1.74155298E12, 1040.9404761904766], [1.74155328E12, 1170.728], [1.74155238E12, 1039.3433734939763], [1.74155268E12, 1039.0299401197599], [1.74155208E12, 1073.7250000000004], [1.74155274E12, 1040.2694610778442], [1.74155304E12, 1044.4910179640722], [1.74155244E12, 1042.029239766082], [1.7415531E12, 1051.7455621301774], [1.74155214E12, 1035.3452380952383]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.7415525E12, 266.2926829268294], [1.7415528E12, 266.8795180722891], [1.7415522E12, 264.5207100591718], [1.74155286E12, 411.6909090909089], [1.74155316E12, 264.66666666666674], [1.74155256E12, 268.36781609195384], [1.74155322E12, 297.421686746988], [1.74155226E12, 308.72392638036797], [1.74155262E12, 275.09756097560995], [1.74155292E12, 261.53892215568857], [1.74155232E12, 293.0476190476193], [1.74155298E12, 262.662721893491], [1.74155328E12, 295.62500000000006], [1.74155238E12, 263.3882352941176], [1.74155268E12, 265.39759036144557], [1.74155208E12, 264.7666666666667], [1.74155274E12, 266.00591715976316], [1.74155304E12, 262.56626506024094], [1.74155244E12, 268.2208588957057], [1.7415531E12, 267.8424242424243], [1.74155214E12, 264.8727272727273]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74155328E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 259.7710843373493, "minX": 1.74155208E12, "maxY": 1184.4606060606066, "series": [{"data": [[1.7415525E12, 261.2242424242424], [1.7415528E12, 260.85029940119745], [1.7415522E12, 260.26035502958575], [1.74155286E12, 401.53293413173657], [1.74155316E12, 262.13939393939404], [1.74155256E12, 260.01754385964915], [1.74155322E12, 295.74999999999983], [1.74155226E12, 327.68518518518516], [1.74155262E12, 272.86666666666673], [1.74155292E12, 259.92261904761926], [1.74155232E12, 297.9166666666669], [1.74155298E12, 260.4550898203594], [1.74155328E12, 293.65384615384613], [1.74155238E12, 261.23214285714266], [1.74155268E12, 261.6402439024391], [1.74155208E12, 262.0], [1.74155274E12, 260.4670658682638], [1.74155304E12, 261.68484848484843], [1.74155244E12, 261.0179640718563], [1.7415531E12, 266.15476190476204], [1.74155214E12, 259.7710843373493]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[1.7415525E12, 1041.82208588957], [1.7415528E12, 1039.2781065088752], [1.7415522E12, 1040.5297619047612], [1.74155286E12, 1157.6196319018406], [1.74155316E12, 1049.0555555555554], [1.74155256E12, 1041.185628742515], [1.74155322E12, 1170.8165680473371], [1.74155226E12, 1184.4606060606066], [1.74155262E12, 1065.2155688622756], [1.74155292E12, 1038.9879518072287], [1.74155232E12, 1041.433734939759], [1.74155298E12, 1040.9345238095245], [1.74155328E12, 1170.7199999999993], [1.74155238E12, 1039.3253012048194], [1.74155268E12, 1039.0119760479045], [1.74155208E12, 1073.6], [1.74155274E12, 1040.2574850299397], [1.74155304E12, 1044.4910179640722], [1.74155244E12, 1042.0175438596486], [1.7415531E12, 1051.739644970414], [1.74155214E12, 1035.3095238095248]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.7415525E12, 266.28658536585374], [1.7415528E12, 266.87349397590356], [1.7415522E12, 264.50887573964513], [1.74155286E12, 411.6909090909089], [1.74155316E12, 264.66666666666674], [1.74155256E12, 268.36781609195384], [1.74155322E12, 297.4156626506023], [1.74155226E12, 308.72392638036797], [1.74155262E12, 275.09146341463423], [1.74155292E12, 261.53892215568857], [1.74155232E12, 293.04166666666646], [1.74155298E12, 262.65680473372777], [1.74155328E12, 295.62500000000006], [1.74155238E12, 263.38235294117635], [1.74155268E12, 265.39759036144557], [1.74155208E12, 264.7666666666667], [1.74155274E12, 266.00000000000006], [1.74155304E12, 262.56626506024094], [1.74155244E12, 268.2147239263804], [1.7415531E12, 267.83636363636356], [1.74155214E12, 264.84242424242433]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74155328E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74155208E12, "maxY": 877.609467455621, "series": [{"data": [[1.7415525E12, 0.0], [1.7415528E12, 0.0], [1.7415522E12, 0.0], [1.74155286E12, 0.0], [1.74155316E12, 0.0], [1.74155256E12, 0.0], [1.74155322E12, 0.0], [1.74155226E12, 0.0], [1.74155262E12, 0.0], [1.74155292E12, 0.0], [1.74155232E12, 0.0], [1.74155298E12, 0.0], [1.74155328E12, 0.0], [1.74155238E12, 0.0], [1.74155268E12, 0.0], [1.74155208E12, 0.0], [1.74155274E12, 0.0], [1.74155304E12, 0.0], [1.74155244E12, 0.0], [1.7415531E12, 0.0], [1.74155214E12, 0.0]], "isOverall": false, "label": "Booking", "isController": false}, {"data": [[1.7415525E12, 780.0306748466259], [1.7415528E12, 778.9467455621306], [1.7415522E12, 779.4226190476187], [1.74155286E12, 776.3680981595094], [1.74155316E12, 786.7592592592592], [1.74155256E12, 781.9760479041912], [1.74155322E12, 877.609467455621], [1.74155226E12, 779.2242424242428], [1.74155262E12, 798.8502994011978], [1.74155292E12, 778.3855421686746], [1.74155232E12, 777.2650602409641], [1.74155298E12, 780.1309523809523], [1.74155328E12, 875.144], [1.74155238E12, 779.2710843373493], [1.74155268E12, 779.2035928143712], [1.74155208E12, 815.0500000000001], [1.74155274E12, 780.3173652694614], [1.74155304E12, 783.2215568862274], [1.74155244E12, 781.0175438596491], [1.7415531E12, 789.248520710059], [1.74155214E12, 776.0952380952382]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.7415525E12, 0.0], [1.7415528E12, 0.0], [1.7415522E12, 0.0], [1.74155286E12, 0.0], [1.74155316E12, 0.0], [1.74155256E12, 0.0], [1.74155322E12, 0.0], [1.74155226E12, 0.0], [1.74155262E12, 0.0], [1.74155292E12, 0.0], [1.74155232E12, 0.0], [1.74155298E12, 0.0], [1.74155328E12, 0.0], [1.74155238E12, 0.0], [1.74155268E12, 0.0], [1.74155208E12, 0.0], [1.74155274E12, 0.0], [1.74155304E12, 0.0], [1.74155244E12, 0.0], [1.7415531E12, 0.0], [1.74155214E12, 0.0]], "isOverall": false, "label": "Search Booking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74155328E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 236.0, "minX": 1.74155208E12, "maxY": 8086.0, "series": [{"data": [[1.7415525E12, 1164.0], [1.7415528E12, 1185.0], [1.7415522E12, 1154.0], [1.74155286E12, 4268.0], [1.74155316E12, 1213.0], [1.74155256E12, 2062.0], [1.74155322E12, 1390.0], [1.74155226E12, 8086.0], [1.74155262E12, 1423.0], [1.74155292E12, 1155.0], [1.74155232E12, 1146.0], [1.74155298E12, 1184.0], [1.74155328E12, 1426.0], [1.74155238E12, 1147.0], [1.74155268E12, 1119.0], [1.74155208E12, 1545.0], [1.74155274E12, 1366.0], [1.74155304E12, 1159.0], [1.74155244E12, 1141.0], [1.7415531E12, 2005.0], [1.74155214E12, 1168.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7415525E12, 1066.4], [1.7415528E12, 1069.7], [1.7415522E12, 1068.3], [1.74155286E12, 1061.3000000000002], [1.74155316E12, 1072.4], [1.74155256E12, 1061.0], [1.74155322E12, 1173.6], [1.74155226E12, 1076.2], [1.74155262E12, 1077.6], [1.74155292E12, 1065.8], [1.74155232E12, 1070.0], [1.74155298E12, 1065.0], [1.74155328E12, 1182.0], [1.74155238E12, 1070.0], [1.74155268E12, 1067.0], [1.74155208E12, 1072.3], [1.74155274E12, 1065.6], [1.74155304E12, 1072.1], [1.74155244E12, 1067.6], [1.7415531E12, 1071.4], [1.74155214E12, 1066.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7415525E12, 1119.33], [1.7415528E12, 1111.94], [1.7415522E12, 1120.65], [1.74155286E12, 4049.4300000000003], [1.74155316E12, 1161.04], [1.74155256E12, 1105.87], [1.74155322E12, 1316.7199999999998], [1.74155226E12, 3976.6000000000004], [1.74155262E12, 1331.2399999999998], [1.74155292E12, 1110.98], [1.74155232E12, 1112.8799999999999], [1.74155298E12, 1117.0], [1.74155328E12, 1249.6399999999994], [1.74155238E12, 1104.9], [1.74155268E12, 1105.04], [1.74155208E12, 1544.93], [1.74155274E12, 1113.0], [1.74155304E12, 1116.04], [1.74155244E12, 1120.7800000000002], [1.7415531E12, 1137.8799999999999], [1.74155214E12, 1102.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7415525E12, 1089.35], [1.7415528E12, 1083.85], [1.7415522E12, 1090.6], [1.74155286E12, 1134.649999999999], [1.74155316E12, 1092.0], [1.74155256E12, 1085.35], [1.74155322E12, 1229.0], [1.74155226E12, 1100.0], [1.74155262E12, 1131.75], [1.74155292E12, 1086.9], [1.74155232E12, 1093.6999999999998], [1.74155298E12, 1092.5], [1.74155328E12, 1200.6], [1.74155238E12, 1089.0], [1.74155268E12, 1086.0], [1.74155208E12, 1095.3], [1.74155274E12, 1088.0], [1.74155304E12, 1089.05], [1.74155244E12, 1092.0], [1.7415531E12, 1090.0], [1.74155214E12, 1080.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7415525E12, 239.0], [1.7415528E12, 239.0], [1.7415522E12, 241.0], [1.74155286E12, 242.0], [1.74155316E12, 242.0], [1.74155256E12, 240.0], [1.74155322E12, 265.0], [1.74155226E12, 236.0], [1.74155262E12, 243.0], [1.74155292E12, 242.0], [1.74155232E12, 240.0], [1.74155298E12, 240.0], [1.74155328E12, 276.0], [1.74155238E12, 241.0], [1.74155268E12, 239.0], [1.74155208E12, 247.0], [1.74155274E12, 240.0], [1.74155304E12, 240.0], [1.74155244E12, 239.0], [1.7415531E12, 240.0], [1.74155214E12, 243.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7415525E12, 270.0], [1.7415528E12, 273.0], [1.7415522E12, 270.0], [1.74155286E12, 265.0], [1.74155316E12, 271.0], [1.74155256E12, 271.0], [1.74155322E12, 296.0], [1.74155226E12, 270.0], [1.74155262E12, 273.0], [1.74155292E12, 270.0], [1.74155232E12, 273.0], [1.74155298E12, 269.0], [1.74155328E12, 298.0], [1.74155238E12, 270.0], [1.74155268E12, 272.0], [1.74155208E12, 270.0], [1.74155274E12, 271.0], [1.74155304E12, 271.0], [1.74155244E12, 272.0], [1.7415531E12, 272.0], [1.74155214E12, 271.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74155328E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 260.0, "minX": 1.0, "maxY": 4272.0, "series": [{"data": [[8.0, 273.0], [2.0, 304.5], [9.0, 273.0], [10.0, 273.0], [11.0, 273.0], [12.0, 273.5], [3.0, 273.0], [13.0, 272.0], [14.0, 277.0], [15.0, 270.0], [4.0, 270.0], [16.0, 260.0], [1.0, 310.0], [17.0, 291.5], [5.0, 280.0], [20.0, 266.5], [22.0, 2264.0], [6.0, 276.0], [7.0, 274.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 3251.0], [22.0, 4272.0], [15.0, 2259.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 260.0, "minX": 1.0, "maxY": 4272.0, "series": [{"data": [[8.0, 273.0], [2.0, 304.5], [9.0, 273.0], [10.0, 273.0], [11.0, 273.0], [12.0, 273.5], [3.0, 273.0], [13.0, 272.0], [14.0, 277.0], [15.0, 270.0], [4.0, 270.0], [16.0, 260.0], [1.0, 310.0], [17.0, 291.5], [5.0, 280.0], [20.0, 266.5], [22.0, 2264.0], [6.0, 276.0], [7.0, 274.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 3251.0], [22.0, 4272.0], [15.0, 2259.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.74155208E12, "maxY": 8.516666666666667, "series": [{"data": [[1.7415525E12, 8.25], [1.7415528E12, 8.35], [1.7415522E12, 8.466666666666667], [1.74155286E12, 8.266666666666667], [1.74155316E12, 8.25], [1.74155256E12, 8.516666666666667], [1.74155322E12, 8.366666666666667], [1.74155226E12, 8.166666666666666], [1.74155262E12, 8.283333333333333], [1.74155292E12, 8.4], [1.74155232E12, 8.35], [1.74155298E12, 8.366666666666667], [1.74155328E12, 6.45], [1.74155238E12, 8.466666666666667], [1.74155268E12, 8.266666666666667], [1.74155208E12, 1.8166666666666667], [1.74155274E12, 8.4], [1.74155304E12, 8.266666666666667], [1.74155244E12, 8.25], [1.7415531E12, 8.4], [1.74155214E12, 8.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74155328E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74155208E12, "maxY": 8.533333333333333, "series": [{"data": [[1.7415525E12, 8.2], [1.7415528E12, 8.366666666666667], [1.7415522E12, 8.433333333333334], [1.74155286E12, 8.133333333333333], [1.74155316E12, 8.25], [1.74155256E12, 8.533333333333333], [1.74155322E12, 8.383333333333333], [1.74155226E12, 8.116666666666667], [1.74155262E12, 8.266666666666667], [1.74155292E12, 8.35], [1.74155232E12, 8.366666666666667], [1.74155298E12, 8.4], [1.74155328E12, 6.516666666666667], [1.74155238E12, 8.4], [1.74155268E12, 8.283333333333333], [1.74155208E12, 1.7666666666666666], [1.74155274E12, 8.383333333333333], [1.74155304E12, 8.3], [1.74155244E12, 8.35], [1.7415531E12, 8.366666666666667], [1.74155214E12, 8.316666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74155286E12, 0.11666666666666667], [1.74155226E12, 0.05]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74155328E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74155208E12, "maxY": 2.9, "series": [{"data": [[1.74155286E12, 0.11666666666666667], [1.74155226E12, 0.05]], "isOverall": false, "label": "Search Booking-failure", "isController": false}, {"data": [[1.7415525E12, 2.75], [1.7415528E12, 2.783333333333333], [1.7415522E12, 2.816666666666667], [1.74155286E12, 2.783333333333333], [1.74155316E12, 2.75], [1.74155256E12, 2.85], [1.74155322E12, 2.8], [1.74155226E12, 2.7], [1.74155262E12, 2.75], [1.74155292E12, 2.8], [1.74155232E12, 2.8], [1.74155298E12, 2.783333333333333], [1.74155328E12, 2.1666666666666665], [1.74155238E12, 2.8], [1.74155268E12, 2.7333333333333334], [1.74155208E12, 0.6], [1.74155274E12, 2.783333333333333], [1.74155304E12, 2.75], [1.74155244E12, 2.783333333333333], [1.7415531E12, 2.8], [1.74155214E12, 2.7666666666666666]], "isOverall": false, "label": "Booking-success", "isController": false}, {"data": [[1.7415525E12, 2.716666666666667], [1.7415528E12, 2.816666666666667], [1.7415522E12, 2.8], [1.74155286E12, 2.716666666666667], [1.74155316E12, 2.7], [1.74155256E12, 2.783333333333333], [1.74155322E12, 2.816666666666667], [1.74155226E12, 2.75], [1.74155262E12, 2.783333333333333], [1.74155292E12, 2.7666666666666666], [1.74155232E12, 2.7666666666666666], [1.74155298E12, 2.8], [1.74155328E12, 2.0833333333333335], [1.74155238E12, 2.7666666666666666], [1.74155268E12, 2.783333333333333], [1.74155208E12, 0.6666666666666666], [1.74155274E12, 2.783333333333333], [1.74155304E12, 2.783333333333333], [1.74155244E12, 2.85], [1.7415531E12, 2.816666666666667], [1.74155214E12, 2.8]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.7415525E12, 2.7333333333333334], [1.7415528E12, 2.7666666666666666], [1.7415522E12, 2.816666666666667], [1.74155286E12, 2.6333333333333333], [1.74155316E12, 2.8], [1.74155256E12, 2.9], [1.74155322E12, 2.7666666666666666], [1.74155226E12, 2.6666666666666665], [1.74155262E12, 2.7333333333333334], [1.74155292E12, 2.783333333333333], [1.74155232E12, 2.8], [1.74155298E12, 2.816666666666667], [1.74155328E12, 2.2666666666666666], [1.74155238E12, 2.8333333333333335], [1.74155268E12, 2.7666666666666666], [1.74155208E12, 0.5], [1.74155274E12, 2.816666666666667], [1.74155304E12, 2.7666666666666666], [1.74155244E12, 2.716666666666667], [1.7415531E12, 2.75], [1.74155214E12, 2.75]], "isOverall": false, "label": "Search Booking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74155328E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74155208E12, "maxY": 8.533333333333333, "series": [{"data": [[1.7415525E12, 8.2], [1.7415528E12, 8.366666666666667], [1.7415522E12, 8.433333333333334], [1.74155286E12, 8.133333333333333], [1.74155316E12, 8.25], [1.74155256E12, 8.533333333333333], [1.74155322E12, 8.383333333333333], [1.74155226E12, 8.116666666666667], [1.74155262E12, 8.266666666666667], [1.74155292E12, 8.35], [1.74155232E12, 8.366666666666667], [1.74155298E12, 8.4], [1.74155328E12, 6.516666666666667], [1.74155238E12, 8.4], [1.74155268E12, 8.283333333333333], [1.74155208E12, 1.7666666666666666], [1.74155274E12, 8.383333333333333], [1.74155304E12, 8.3], [1.74155244E12, 8.35], [1.7415531E12, 8.366666666666667], [1.74155214E12, 8.316666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74155286E12, 0.11666666666666667], [1.74155226E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74155328E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

